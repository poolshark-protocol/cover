type CoverPoolFactory @entity {
    # poolAddress
    id: ID!
    manager: CoverPoolManager!
    poolCount: BigInt!
    txnCount: BigInt!
    volumeUsdTotal: BigDecimal!
    volumeEthTotal: BigDecimal!
    feesUsdTotal: BigDecimal!
    feesEthTotal: BigDecimal!
    totalValueLockedUsd: BigDecimal!
    totalValueLockedEth: BigDecimal!
}

type BasePrice @entity {
    id: ID!
    USD: BigDecimal!
}

type PoolRouter @entity {
    id: ID!

    limitPoolFactory: Bytes!
    coverPoolFactory: Bytes!
}

type CoverPoolManager @entity {
    id: ID!
    owner: Bytes!
    feeTo: Bytes!
    factory: CoverPoolFactory!
    volatilityTiers: [VolatilityTier!]!
}

type VolatilityTier @entity {
    # fee amount + tick spread + twap length + auction length
    id: ID!
    poolTypeId: String!
    feeAmount: BigInt!
    tickSpread: BigInt!
    twapLength: BigInt!
    auctionLength: BigInt!

    # creation stats
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
}

type TwapSource @entity {
    id: ID!
}

type Token @entity {
    # token address
    id: ID!
    name: String!
    symbol: String!
    decimals: BigInt!

    # price
    ethPrice: BigDecimal!
    usdPrice: BigDecimal!

    # token specific volume
    volume: BigDecimal!
    volumeUsd: BigDecimal!
    volumeEth: BigDecimal!
    txnCount: BigInt!

    # liquidity across all pairs
    totalValueLocked: BigDecimal!
    totalValueLockedEth: BigDecimal!
    totalValueLockedUsd: BigDecimal!

    # for base price tracking
    whitelistPools: [CoverPool!]!
}

type CoverPool @entity {
    # poolAddress
    id: ID!
    token0: Token!
    token1: Token!
    factory: Bytes!

    # pool setup
    inputPool: Bytes!
    volatilityTier: VolatilityTier!
    genesisTime: BigInt!

    # sample status
    sampleCount: BigInt!
    sampleCountMax: BigInt!
    sampleCountRequired: BigInt!

    newLatestTick: BigInt!
    latestTick: BigInt!
    liquidity: BigInt!
    liquidityGlobal: BigInt!
    auctionEpoch: BigInt!
    auctionStart: BigInt!

    pool0Price: BigInt!
    pool1Price: BigInt!
    pool0Liquidity: BigInt!
    pool1Liquidity: BigInt!

    price0: BigDecimal!
    price1: BigDecimal!
    volumeToken0: BigDecimal!
    volumeToken1: BigDecimal!
    volumeUsd: BigDecimal!
    volumeEth: BigDecimal!
    feesUsd: BigDecimal!
    feesEth: BigDecimal!
    txnCount: BigInt!

    totalValueLocked0: BigDecimal!
    totalValueLocked1: BigDecimal!
    totalValueLockedUsd: BigDecimal!
    totalValueLockedEth: BigDecimal!

    # collects: [PositionCollect!]! @derivedFrom(field: "pool")
    # swaps: [Swap!]! @derivedFrom(field: "pool")
    # ticks: [Tick!]! @derivedFrom(field: "pool")

    # creation stats
    createdAtTimestamp: BigInt!
    createdAtBlockNumber: BigInt!
    updatedAtTimestamp: BigInt!
    updatedAtBlockNumber: BigInt!
}

type LimitPool @entity {
    # poolAddress
    id: ID!

    coverPool: CoverPool!
    samplesRecorded: BigInt!
}

type Sample @entity {
    # poolAddress + sample number
    id: ID!
    tickSecondsAccum: BigInt!
    blockTimestamp: BigInt!
}

type Position @entity {
    # poolAddress + owner + lower + upper
    id: ID!
    pool: CoverPool!
    positionId: BigInt!
    txnHash: Bytes!
    createdBy: Bytes!
    createdAtTimestamp: BigInt!
    epochLast: BigInt!
    claimPriceLast: BigInt!
    owner: Bytes!
    lower: BigInt!
    upper: BigInt!
    liquidity: BigInt!
    amountInDeltaMax: BigInt!
    amountOutDeltaMax: BigInt!
    inToken: Token!
    outToken: Token!
    inAmount: BigInt!
    outAmount: BigInt!
    zeroForOne: Boolean!
}

type MintLog @entity {
    id: ID!
    txnHash: Bytes!
    owner: Bytes!
    lower: BigInt!
    upper: BigInt!
    zeroForOne: Boolean!
    epochLast: BigInt!
    amountIn: BigInt!
    liquidityMinted: BigInt!
    amountInDeltaMaxMinted: BigInt!
    amountOutDeltaMaxMinted: BigInt!
}

type BurnLog @entity {
    id: ID!
    txnHash: Bytes!
    owner: Bytes!
    lower: BigInt!
    upper: BigInt!
    claim: BigInt!
    zeroForOne: Boolean!
    liquidityBurned: BigInt!
    # tokenInClaimed: BigInt!
    # tokenOutClaimed: BigInt!
    # tokenOutBurned: BigInt!
    # amountInDeltaMaxStashedBurned: BigInt!
    # amountOutDeltaMaxStashedBurned: BigInt!
    amountInDeltaMaxBurned: BigInt!
    # amountOutDeltaMaxBurned: BigInt!
}

type Tick @entity {
    # poolAddress + index
    id: ID!
    pool: CoverPool!
    index: BigInt!
    price0: BigDecimal!
    price1: BigDecimal!
    epochLast0: BigInt!
    epochLast1: BigInt!
}

type TickDeltas @entity {
    # poolAddress + index + zeroForOne
    id: ID!
    pool: CoverPool!
    index: BigInt!
    liquidityMinus: BigInt!
    zeroForOne: Boolean!
    amountInDelta: BigInt!
    amountOutDelta: BigInt!
    amountInDeltaMax: BigInt!
    amountOutDeltaMax: BigInt!
    amountInDeltaMaxMinus: BigInt!
    amountOutDeltaMaxMinus: BigInt!
    amountInDeltaMaxStashed: BigInt!
    amountOutDeltaMaxStashed: BigInt!
}
