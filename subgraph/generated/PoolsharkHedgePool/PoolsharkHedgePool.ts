// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lower(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get upper(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get zeroForOne(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get liquidityBurned(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Collect extends ethereum.Event {
  get params(): Collect__Params {
    return new Collect__Params(this);
  }
}

export class Collect__Params {
  _event: Collect;

  constructor(event: Collect) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lower(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get upper(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get zeroForOne(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get liquidityMinted(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token0(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fee(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get tickSpacing(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PoolsharkHedgePool__pool0Result {
  value0: i32;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class PoolsharkHedgePool__pool1Result {
  value0: i32;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class PoolsharkHedgePool__positions0Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class PoolsharkHedgePool__positions1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class PoolsharkHedgePool__tickNodesResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    return map;
  }
}

export class PoolsharkHedgePool__ticks0Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class PoolsharkHedgePool__ticks1Result {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class PoolsharkHedgePool extends ethereum.SmartContract {
  static bind(address: Address): PoolsharkHedgePool {
    return new PoolsharkHedgePool("PoolsharkHedgePool", address);
  }

  feeTo(): Address {
    let result = super.call("feeTo", "feeTo():(address)", []);

    return result[0].toAddress();
  }

  try_feeTo(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeTo", "feeTo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastBlockNumber(): BigInt {
    let result = super.call(
      "lastBlockNumber",
      "lastBlockNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastBlockNumber",
      "lastBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestTick(): i32 {
    let result = super.call("latestTick", "latestTick():(int24)", []);

    return result[0].toI32();
  }

  try_latestTick(): ethereum.CallResult<i32> {
    let result = super.tryCall("latestTick", "latestTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  pool0(): PoolsharkHedgePool__pool0Result {
    let result = super.call(
      "pool0",
      "pool0():(int24,int24,uint160,uint128,uint232)",
      []
    );

    return new PoolsharkHedgePool__pool0Result(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_pool0(): ethereum.CallResult<PoolsharkHedgePool__pool0Result> {
    let result = super.tryCall(
      "pool0",
      "pool0():(int24,int24,uint160,uint128,uint232)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolsharkHedgePool__pool0Result(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  pool1(): PoolsharkHedgePool__pool1Result {
    let result = super.call(
      "pool1",
      "pool1():(int24,int24,uint160,uint128,uint232)",
      []
    );

    return new PoolsharkHedgePool__pool1Result(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_pool1(): ethereum.CallResult<PoolsharkHedgePool__pool1Result> {
    let result = super.tryCall(
      "pool1",
      "pool1():(int24,int24,uint160,uint128,uint232)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolsharkHedgePool__pool1Result(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  positions0(
    param0: Address,
    param1: i32,
    param2: i32
  ): PoolsharkHedgePool__positions0Result {
    let result = super.call(
      "positions0",
      "positions0(address,int24,int24):(uint128,uint232,uint160,uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromI32(param1),
        ethereum.Value.fromI32(param2)
      ]
    );

    return new PoolsharkHedgePool__positions0Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_positions0(
    param0: Address,
    param1: i32,
    param2: i32
  ): ethereum.CallResult<PoolsharkHedgePool__positions0Result> {
    let result = super.tryCall(
      "positions0",
      "positions0(address,int24,int24):(uint128,uint232,uint160,uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromI32(param1),
        ethereum.Value.fromI32(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolsharkHedgePool__positions0Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  positions1(
    param0: Address,
    param1: i32,
    param2: i32
  ): PoolsharkHedgePool__positions1Result {
    let result = super.call(
      "positions1",
      "positions1(address,int24,int24):(uint128,uint232,uint160,uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromI32(param1),
        ethereum.Value.fromI32(param2)
      ]
    );

    return new PoolsharkHedgePool__positions1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_positions1(
    param0: Address,
    param1: i32,
    param2: i32
  ): ethereum.CallResult<PoolsharkHedgePool__positions1Result> {
    let result = super.tryCall(
      "positions1",
      "positions1(address,int24,int24):(uint128,uint232,uint160,uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromI32(param1),
        ethereum.Value.fromI32(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolsharkHedgePool__positions1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  swap(
    recipient: Address,
    zeroForOne: boolean,
    amountIn: BigInt,
    priceLimit: BigInt
  ): BigInt {
    let result = super.call(
      "swap",
      "swap(address,bool,uint256,uint160):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(priceLimit)
      ]
    );

    return result[0].toBigInt();
  }

  try_swap(
    recipient: Address,
    zeroForOne: boolean,
    amountIn: BigInt,
    priceLimit: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swap",
      "swap(address,bool,uint256,uint160):(uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroForOne),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(priceLimit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tickNodes(param0: i32): PoolsharkHedgePool__tickNodesResult {
    let result = super.call("tickNodes", "tickNodes(int24):(int24,int24)", [
      ethereum.Value.fromI32(param0)
    ]);

    return new PoolsharkHedgePool__tickNodesResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_tickNodes(
    param0: i32
  ): ethereum.CallResult<PoolsharkHedgePool__tickNodesResult> {
    let result = super.tryCall("tickNodes", "tickNodes(int24):(int24,int24)", [
      ethereum.Value.fromI32(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolsharkHedgePool__tickNodesResult(
        value[0].toI32(),
        value[1].toI32()
      )
    );
  }

  ticks0(param0: i32): PoolsharkHedgePool__ticks0Result {
    let result = super.call(
      "ticks0",
      "ticks0(int24):(int128,uint128,uint232,int128,int128,uint64,uint64)",
      [ethereum.Value.fromI32(param0)]
    );

    return new PoolsharkHedgePool__ticks0Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_ticks0(
    param0: i32
  ): ethereum.CallResult<PoolsharkHedgePool__ticks0Result> {
    let result = super.tryCall(
      "ticks0",
      "ticks0(int24):(int128,uint128,uint232,int128,int128,uint64,uint64)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolsharkHedgePool__ticks0Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  ticks1(param0: i32): PoolsharkHedgePool__ticks1Result {
    let result = super.call(
      "ticks1",
      "ticks1(int24):(int128,uint128,uint232,int128,int128,uint64,uint64)",
      [ethereum.Value.fromI32(param0)]
    );

    return new PoolsharkHedgePool__ticks1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_ticks1(
    param0: i32
  ): ethereum.CallResult<PoolsharkHedgePool__ticks1Result> {
    let result = super.tryCall(
      "ticks1",
      "ticks1(int24):(int128,uint128,uint232,int128,int128,uint64,uint64)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolsharkHedgePool__ticks1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  utils(): Address {
    let result = super.call("utils", "utils():(address)", []);

    return result[0].toAddress();
  }

  try_utils(): ethereum.CallResult<Address> {
    let result = super.tryCall("utils", "utils():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _inputPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _libraries(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _swapFee(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _tickSpacing(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get lower(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get upper(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get claim(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get lowerOld(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get lower(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get upperOld(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get upper(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get amountDesired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get native(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get priceLimit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
