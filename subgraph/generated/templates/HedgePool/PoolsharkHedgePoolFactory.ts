// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fee(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickSpacing(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get pool(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class PoolsharkHedgePoolFactory extends ethereum.SmartContract {
  static bind(address: Address): PoolsharkHedgePoolFactory {
    return new PoolsharkHedgePoolFactory("PoolsharkHedgePoolFactory", address);
  }

  concentratedFactory(): Address {
    let result = super.call(
      "concentratedFactory",
      "concentratedFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_concentratedFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "concentratedFactory",
      "concentratedFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createHedgePool(
    fromToken: Address,
    destToken: Address,
    swapFee: BigInt
  ): Address {
    let result = super.call(
      "createHedgePool",
      "createHedgePool(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(destToken),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );

    return result[0].toAddress();
  }

  try_createHedgePool(
    fromToken: Address,
    destToken: Address,
    swapFee: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createHedgePool",
      "createHedgePool(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(destToken),
        ethereum.Value.fromUnsignedBigInt(swapFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeTierTickSpacing(param0: BigInt): BigInt {
    let result = super.call(
      "feeTierTickSpacing",
      "feeTierTickSpacing(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_feeTierTickSpacing(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeTierTickSpacing",
      "feeTierTickSpacing(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHedgePool(fromToken: Address, destToken: Address, fee: BigInt): Address {
    let result = super.call(
      "getHedgePool",
      "getHedgePool(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(destToken),
        ethereum.Value.fromUnsignedBigInt(fee)
      ]
    );

    return result[0].toAddress();
  }

  try_getHedgePool(
    fromToken: Address,
    destToken: Address,
    fee: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getHedgePool",
      "getHedgePool(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(fromToken),
        ethereum.Value.fromAddress(destToken),
        ethereum.Value.fromUnsignedBigInt(fee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  libraries(): Address {
    let result = super.call("libraries", "libraries():(address)", []);

    return result[0].toAddress();
  }

  try_libraries(): ethereum.CallResult<Address> {
    let result = super.tryCall("libraries", "libraries():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolList(param0: BigInt): Address {
    let result = super.call("poolList", "poolList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_poolList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("poolList", "poolList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolMapping(param0: Bytes): Address {
    let result = super.call("poolMapping", "poolMapping(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_poolMapping(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolMapping",
      "poolMapping(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _concentratedFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _libraries(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateHedgePoolCall extends ethereum.Call {
  get inputs(): CreateHedgePoolCall__Inputs {
    return new CreateHedgePoolCall__Inputs(this);
  }

  get outputs(): CreateHedgePoolCall__Outputs {
    return new CreateHedgePoolCall__Outputs(this);
  }
}

export class CreateHedgePoolCall__Inputs {
  _call: CreateHedgePoolCall;

  constructor(call: CreateHedgePoolCall) {
    this._call = call;
  }

  get fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get destToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get swapFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateHedgePoolCall__Outputs {
  _call: CreateHedgePoolCall;

  constructor(call: CreateHedgePoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
