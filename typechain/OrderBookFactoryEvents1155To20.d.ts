/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderBookFactoryEvents1155To20Interface
  extends ethers.utils.Interface {
  functions: {};

  events: {
    "BookCreated(address,address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BookCreated"): EventFragment;
}

export type BookCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    book: string;
    token1155: string;
    token1155Id: BigNumber;
    token20: string;
    fee: BigNumber;
  }
>;

export class OrderBookFactoryEvents1155To20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderBookFactoryEvents1155To20Interface;

  functions: {};

  callStatic: {};

  filters: {
    "BookCreated(address,address,uint256,address,uint256)"(
      book?: null,
      token1155?: null,
      token1155Id?: null,
      token20?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        book: string;
        token1155: string;
        token1155Id: BigNumber;
        token20: string;
        fee: BigNumber;
      }
    >;

    BookCreated(
      book?: null,
      token1155?: null,
      token1155Id?: null,
      token20?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        book: string;
        token1155: string;
        token1155Id: BigNumber;
        token20: string;
        fee: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
