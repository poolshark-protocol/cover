/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ITickMath, ITickMathInterface } from "../ITickMath";

const _abi = [
  {
    inputs: [],
    name: "MAX_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "ratio",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_TICK",
    outputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "ratio",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_TICK",
    outputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getTickAtSqrtRatio",
    outputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "price",
        type: "uint160",
      },
    ],
    name: "validatePrice",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

export class ITickMath__factory {
  static readonly abi = _abi;
  static createInterface(): ITickMathInterface {
    return new utils.Interface(_abi) as ITickMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITickMath {
    return new Contract(address, _abi, signerOrProvider) as ITickMath;
  }
}
