/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Ticks, TicksInterface } from "../Ticks";

const _abi = [
  {
    inputs: [],
    name: "AmountInDeltaNeutral",
    type: "error",
  },
  {
    inputs: [],
    name: "AmountOutDeltaNeutral",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    name: "InfiniteTickLoop0",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    name: "InfiniteTickLoop1",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLatestTick",
    type: "error",
  },
  {
    inputs: [],
    name: "LiquidityOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "NoLiquidityToRollover",
    type: "error",
  },
  {
    inputs: [],
    name: "NotImplementedYet",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickLowerOld",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickLowerRange",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickOrder",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickUpperOld",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickUpperRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
      {
        internalType: "uint160",
        name: "priceLimit",
        type: "uint160",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "unlocked",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "swapFee",
            type: "uint16",
          },
          {
            internalType: "int16",
            name: "tickSpread",
            type: "int16",
          },
          {
            internalType: "uint16",
            name: "twapLength",
            type: "uint16",
          },
          {
            internalType: "int24",
            name: "latestTick",
            type: "int24",
          },
          {
            internalType: "uint32",
            name: "lastBlockNumber",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "accumEpoch",
            type: "uint32",
          },
          {
            internalType: "uint128",
            name: "liquidityGlobal",
            type: "uint128",
          },
          {
            internalType: "uint160",
            name: "latestPrice",
            type: "uint160",
          },
        ],
        internalType: "struct ICoverPoolStructs.GlobalState",
        name: "state",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "input",
            type: "uint256",
          },
        ],
        internalType: "struct ICoverPoolStructs.SwapCache",
        name: "cache",
        type: "tuple",
      },
    ],
    name: "quote",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "input",
            type: "uint256",
          },
        ],
        internalType: "struct ICoverPoolStructs.SwapCache",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61253861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80635a9d606f1461005b5780635f580c66146100aa578063cdb98d07146100cc578063dd3fac92146100f9575b600080fd5b61006e610069366004611f91565b610119565b604080518351815260208085015190820152838201519181019190915260609283015192810192909252608082015260a0015b60405180910390f35b8180156100b657600080fd5b506100ca6100c5366004612050565b6106f2565b005b8180156100d857600080fd5b506100ec6100e73660046120af565b610a85565b6040516100a1919061214f565b81801561010557600080fd5b506100ca610114366004612210565b611903565b6101446040518060800160405280600081526020016000815260200160008152602001600081525090565b6000856101685782516001600160a01b03861611158061016357508251155b610177565b82516001600160a01b03861610155b15610187575081905060006106e9565b6101008401516001600160a01b031680871561044e57866001600160a01b03168110156101ba57506001600160a01b0386165b60208501518551604051630e8e499360e21b8152600481019290925260248201839052604482015260009073__$357eccfa53a4e88c122661903e0e603301$__90633a39264c90606401602060405180830381865af4158015610221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102459190612292565b9050808660600151116103a3576020860151865160608881015192901b9160009173__$1b9fef1800622f5f6a93914ffdeb7ba32f$__91630af8b27f91859161028e90826122c1565b61029890876122e0565b6040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401602060405180830381865af41580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190612292565b60208901518951604051630b00d01b60e31b8152600481019290925260248201839052604482015290915073__$357eccfa53a4e88c122661903e0e603301$__9063580680d890606401602060405180830381865af415801561036c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103909190612292565b9088526000606089015294506104489050565b60208601518651604051630b00d01b60e31b8152600481019290925260248201849052604482015273__$357eccfa53a4e88c122661903e0e603301$__9063580680d890606401602060405180830381865af4158015610407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042b9190612292565b82875260608701805191955082916104449083906122f8565b9052505b506106e3565b866001600160a01b031681111561046b57506001600160a01b0386165b60208501518551604051630b00d01b60e31b8152600481019290925260248201526044810183905260009073__$357eccfa53a4e88c122661903e0e603301$__9063580680d890606401602060405180830381865af41580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f69190612292565b90508086606001511161063c576060860151602087015160405163554d048960e11b81526004810192909252600160601b6024830152604482015260009073__$1b9fef1800622f5f6a93914ffdeb7ba32f$__9063aa9a091290606401602060405180830381865af4158015610570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105949190612292565b87516105a091906122e0565b60208801518851604051630e8e499360e21b8152600481019290925260248201526044810182905290915073__$357eccfa53a4e88c122661903e0e603301$__90633a39264c90606401602060405180830381865af4158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190612292565b9087526000606088015293506106e1565b60208601518651604051630e8e499360e21b8152600481019290925260248201526044810184905273__$357eccfa53a4e88c122661903e0e603301$__90633a39264c90606401602060405180830381865af41580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190612292565b82875260608701805191955082916106dd9083906122f8565b9052505b505b84935050505b94509492505050565b6040518060600160405280620d89e71960020b8152602001620d89e7196107189061230f565b60020b81526020018363ffffffff168152508660008560020b60020b815260200190815260200160002060008201518160000160006101000a81548162ffffff021916908360020b62ffffff16021790555060208201518160000160036101000a81548162ffffff021916908360020b62ffffff16021790555060408201518160000160066101000a81548163ffffffff021916908363ffffffff1602179055509050506040518060600160405280620d89e71960020b81526020018460020b81526020018363ffffffff16815250866000620d89e71960020b60020b815260200190815260200160002060008201518160000160006101000a81548162ffffff021916908360020b62ffffff16021790555060208201518160000160036101000a81548162ffffff021916908360020b62ffffff16021790555060408201518160000160066101000a81548163ffffffff021916908363ffffffff16021790555090505060405180606001604052808460020b8152602001620d89e71961089f9061230f565b60020b815263ffffffff84166020909101528660006108c1620d89e71961230f565b60020b815260208082019290925260409081016000208351815493850151949092015163ffffffff1666010000000000000269ffffffff0000000000001962ffffff95861663010000000265ffffffffffff199095169590931694909417929092171691909117905573__$b52f7ddb7db4526c8b5c81c46a9292f776$__63986cfba361094e8386612331565b6040516001600160e01b031960e084901b16815260029190910b6004820152602401602060405180830381865af415801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190612379565b6001860180546001600160a01b0319166001600160a01b039290921691909117905573__$b52f7ddb7db4526c8b5c81c46a9292f776$__63986cfba36109f7838661239d565b6040516001600160e01b031960e084901b16815260029190910b6004820152602401602060405180830381865af4158015610a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5a9190612379565b60019490940180546001600160a01b0319166001600160a01b03909516949094179093555050505050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915260008a60008660020b60020b81526020019081526020016000206040518060e00160405290816000820160009054906101000a9004600f0b600f0b600f0b81526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160109054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016002820160189054906101000a90046001600160401b03166001600160401b03166001600160401b031681525050905060008b60008960020b60020b81526020019081526020016000206040518060e00160405290816000820160009054906101000a9004600f0b600f0b600f0b81526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016002820160109054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016002820160189054906101000a90046001600160401b03166001600160401b03166001600160401b031681525050905060016001607f1b036001600160801b0316856001600160801b03161115610dc45760405163581a12d760e11b815260040160405180910390fd5b846001600160801b03168a60e0015160016001607f1b03610de591906123e4565b6001600160801b03161015610e0d5760405163581a12d760e11b815260040160405180910390fd5b600288810b600090815260208d9052604090205463010000008104820b910b14611097578315610e74578481600001818151610e49919061240c565b600f0b905250602081018051869190610e63908390612452565b6001600160801b0316905250611130565b60a08101516001600160401b03161561107a5760208101518151600091610e9a9161247d565b6001600160801b031690506000670de0b6b3a76400008360a001516001600160401b031684606001516001600160801b0316610ed691906122c1565b610ee091906124c3565b90508083606001818151610ef491906123e4565b6001600160801b031690525060405163554d048960e11b81526004810182905260248101839052600160601b604482015260009073__$1b9fef1800622f5f6a93914ffdeb7ba32f$";

type TicksConstructorParams =
  | [linkLibraryAddresses: TicksLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicksConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Ticks__factory extends ContractFactory {
  constructor(...args: TicksConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Ticks__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: TicksLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$357eccfa53a4e88c122661903e0e603301\\$__", "g"),
      linkLibraryAddresses["contracts/libraries/DyDxMath.sol:DyDxMath"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$1b9fef1800622f5f6a93914ffdeb7ba32f\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/FullPrecisionMath.sol:FullPrecisionMath"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$b52f7ddb7db4526c8b5c81c46a9292f776\\$__", "g"),
      linkLibraryAddresses["contracts/libraries/TickMath.sol:TickMath"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Ticks> {
    return super.deploy(overrides || {}) as Promise<Ticks>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Ticks {
    return super.attach(address) as Ticks;
  }
  connect(signer: Signer): Ticks__factory {
    return super.connect(signer) as Ticks__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicksInterface {
    return new utils.Interface(_abi) as TicksInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Ticks {
    return new Contract(address, _abi, signerOrProvider) as Ticks;
  }
}

export interface TicksLibraryAddresses {
  ["contracts/libraries/DyDxMath.sol:DyDxMath"]: string;
  ["contracts/libraries/FullPrecisionMath.sol:FullPrecisionMath"]: string;
  ["contracts/libraries/TickMath.sol:TickMath"]: string;
}
