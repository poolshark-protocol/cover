/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Ticks, TicksInterface } from "../Ticks";

const _abi = [
  {
    inputs: [],
    name: "NotImplementedYet",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickLowerOrder",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickLowerRange",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickOrder",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickUpperOrder",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTickUpperRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "_tickSpacing",
        type: "uint24",
      },
    ],
    name: "getMaxLiquidity",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6112d461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063121f0e0c1461005b5780636345a01714610093578063aa62b776146100b3578063dc47a5c2146100f2575b600080fd5b81801561006757600080fd5b5061007b610076366004610f81565b61011d565b60405160029190910b81526020015b60405180910390f35b81801561009f57600080fd5b5061007b6100ae366004610ff7565b610435565b8180156100bf57600080fd5b506100d36100ce3660046110cc565b610dfc565b60408051938452600292830b6020850152910b9082015260600161008a565b610105610100366004611157565b610f13565b6040516001600160801b03909116815260200161008a565b600284900b60008181526020879052604081209091620d89e7191480159061015b575060028101546001600160801b03858116600160801b90920416145b15610235578054600281810b600090815260208a905260408082206301000000909404830b80835291209188900b146101c5578254825465ffffff000000191663010000009182900462ffffff9081169092021783558354825462ffffff19169116178155610219565b600287810b600090815260208b9052604080822054855465ffffff000000191663010000009182900462ffffff8181169093029190911787558754940b83529120805462ffffff1916929091169190911790555b8760020b8560020b0361022e57825460020b94505b5050610259565b6002810180546001600160801b03600160801b808304821688900382160291161790555b50600284900b600090815260208790526040902061027a620d89e71961118f565b60020b8560020b141580156102a5575060028101546001600160801b03858116600160801b90920416145b156103d7578054600281810b600081815260208b905260408082206301000000909504840b825290209189900b1461030e578254825465ffffff000000191663010000009182900462ffffff9081169092021783558354825462ffffff1916911617815561035c565b600288810b600090815260208b905260408082205486549381900b83529120805465ffffff000000191663010000009384900462ffffff908116909402179055825462ffffff191691161781555b8660020b8560020b0361037157825460020b94505b5050600285810b600090815260208990526040812080546001600160b01b03191681556001810182905591820181905560038201556004810180546fffffffffffffffffffffffffffffffff1916905560050180546001600160a01b03191690556103fb565b6002810180546001600160801b03600160801b808304821688900382160291161790555b600286900b620d89e71914801590610429575060028101546001600160801b03858116600160801b90920416145b50919695505050505050565b60008560020b8860020b12158061045257508660020b8960020b12155b156104705760405163338d790760e01b815260040160405180910390fd5b600288900b620d89e7191315610499576040516345bde0e360e11b815260040160405180910390fd5b6104a6620d89e71961118f565b60020b8660020b13156104cc5760405163093cbe4760e21b815260040160405180910390fd5b60405163986cfba360e01b8152600289900b60048201526001600160a01b0384169073__$b52f7ddb7db4526c8b5c81c46a9292f776$__9063986cfba390602401602060405180830381865af415801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e91906111b1565b6001600160a01b0316111561092957600288810b600090815260208e9052604090200154600160801b90046001600160801b0316801515806105975750600289900b620d89e719145b156105ea576105a686826111ce565b8d60008b60020b60020b815260200190815260200160002060020160106101000a8154816001600160801b0302191690836001600160801b03160217905550610927565b60028a810b600090815260208f905260409020805490916301000000909104810b9089900b8113156106195750875b6002820154600160801b90046001600160801b0316158015610643575060028c900b620d89e71914155b8061065457508a60020b8c60020b12155b8061066557508060020b8b60020b12155b15610683576040516307dfb2f760e01b815260040160405180910390fd5b6040518061014001604052808d60020b81526020018260020b815260200160006001600160801b0316815260200160006001600160801b0316815260200160006001600160801b0316815260200160006001600160801b03168152602001896001600160801b031681526020018f815260200160006001600160801b031681526020018e6001600160a01b03168152508f60008d60020b60020b815260200190815260200160002060008201518160000160006101000a81548162ffffff021916908360020b62ffffff16021790555060208201518160000160036101000a81548162ffffff021916908360020b62ffffff16021790555060408201518160000160066101000a8154816001600160801b0302191690836001600160801b0316021790555060608201518160010160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160010160106101000a8154816001600160801b0302191690836001600160801b0316021790555060a08201518160020160006101000a8154816001600160801b0302191690836001600160801b0316021790555060c08201518160020160106101000a8154816001600160801b0302191690836001600160801b0316021790555060e082015181600301556101008201518160040160006101000a8154816001600160801b0302191690836001600160801b031602179055506101208201518160050160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050508a8260000160036101000a81548162ffffff021916908360020b62ffffff1602179055508a8f60008360020b60020b815260200190815260200160002060000160006101000a81548162ffffff021916908360020b62ffffff16021790555050505b505b60405163986cfba360e01b8152600287900b60048201526001600160a01b0384169073__$b52f7ddb7db4526c8b5c81c46a9292f776$__9063986cfba390602401602060405180830381865af4158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab91906111b1565b6001600160a01b03161115610da057600286810b600090815260208e9052604090200154600160801b90046001600160801b0316801515806109fe57506109f5620d89e71961118f565b60020b8760020b145b15610a5157610a0d86826111ce565b8d60008960020b60020b815260200190815260200160002060020160106101000a8154816001600160801b0302191690836001600160801b03160217905550610d9e565b600288810b600090815260208f90526040902080548183015491926301000000909104900b90600160801b90046001600160801b0316158015610aa65750610a9c620d89e71961118f565b60020b8a60020b14155b80610ab757508860020b8a60020b13155b80610ac857508060020b8960020b12155b15610ae6576040516315beab4760e01b815260040160405180910390fd5b815460028c810b91900b1215610afa578a99505b6040518061014001604052808b60020b81526020018260020b815260200160006001600160801b0316815260200160006001600160801b0316815260200160006001600160801b0316815260200160006001600160801b03168152602001896001600160801b031681526020018f815260200160006001600160801b031681526020018e6001600160a01b03168152508f60008b60020b60020b815260200190815260200160002060008201518160000160006101000a81548162ffffff021916908360020b62ffffff16021790555060208201518160000160036101000a81548162ffffff021916908360020b62ffffff16021790555060408201518160000160066101000a8154816001600160801b0302191690836001600160801b0316021790555060608201518160010160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160010160106101000a8154816001600160801b0302191690836001600160801b0316021790555060a08201518160020160006101000a8154816001600160801b0302191690836001600160801b0316021790555060c08201518160020160106101000a8154816001600160801b0302191690836001600160801b0316021790555060e082015181600301556101008201518160040160006101000a8154816001600160801b0302191690836001600160801b031602179055506101208201518160050160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050888260000160006101000a81548162ffffff021916908360020b62ffffff160217905550888f60008360020b60020b815260200190815260200160002060000160006101000a81548162ffffff021916908360020b62ffffff16021790555050505b505b8560020b8460020b128015610dbb57508160020b8660020b13155b15610dc857859350610dec565b8760020b8460020b128015610de357508160020b8860020b13155b15610dec578793505b50919a9950505050505050505050565b600286900b60009081526020899052604081206005015481908190610e2a906001600160a01b0316896111f9565b60028a900b600090815260208d90526040902060050180546001600160a01b0319166001600160a01b03929092169190911790558415610ee95760028460020b8a60020b81610e7b57610e7b611221565b0560020b81610e8c57610e8c611221565b0760020b600003610ec157600289810b600090815260208d9052604090200154600160801b90046001600160801b0316909603955b600289810b600090815260208d9052604090206003810188905554999a509890980b97610f02565b604051633e231d6d60e21b815260040160405180910390fd5b509499979850959695505050505050565b6000610f20826002611237565b610f2d620d89e71961118f565b610f379190611262565b610f4d9062ffffff166001600160801b03611284565b92915050565b8035600281900b8114610f6557600080fd5b919050565b80356001600160801b0381168114610f6557600080fd5b600080600080600060a08688031215610f9957600080fd5b85359450610fa960208701610f53565b9350610fb760408701610f53565b9250610fc560608701610f6a565b9150610fd360808701610f53565b90509295509295909350565b6001600160a01b0381168114610ff457600080fd5b50565b60008060008060008060008060008060006101608c8e03121561101957600080fd5b8b359a5060208c0135995060408c013561103281610fdf565b985061104060608d01610f53565b975061104e60808d01610f53565b965061105c60a08d01610f53565b955061106a60c08d01610f53565b945061107860e08d01610f6a565b93506110876101008d01610f53565b92506101208c013561109881610fdf565b91506110a76101408d01610f53565b90509295989b509295989b9093969950565b803562ffffff81168114610f6557600080fd5b600080600080600080600080610100898b0312156110e957600080fd5b883597506110f960208a01610f53565b965061110760408a01610f53565b9550606089013561111781610fdf565b94506080890135935060a0890135925060c0890135801515811461113a57600080fd5b915061114860e08a016110b9565b90509295985092959890939650565b60006020828403121561116957600080fd5b611172826110b9565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008160020b627fffff1981036111a8576111a8611179565b60000392915050565b6000602082840312156111c357600080fd5b815161117281610fdf565b60006001600160801b038083168185168083038211156111f0576111f0611179565b01949350505050565b60006001600160a01b038381169083168181101561121957611219611179565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600062ffffff8083168185168183048111821515161561125957611259611179565b02949350505050565b600062ffffff8084168061127857611278611221565b92169190910492915050565b60006001600160801b03808416806112785761127861122156fea264697066735822122087c8df9c84b3c05ae4f7c6b5c0b98b4977704648383f74105aba64aa9093c22b64736f6c634300080d0033";

type TicksConstructorParams =
  | [linkLibraryAddresses: TicksLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicksConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Ticks__factory extends ContractFactory {
  constructor(...args: TicksConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Ticks__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: TicksLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$b52f7ddb7db4526c8b5c81c46a9292f776\\$__", "g"),
      linkLibraryAddresses["contracts/libraries/TickMath.sol:TickMath"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Ticks> {
    return super.deploy(overrides || {}) as Promise<Ticks>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Ticks {
    return super.attach(address) as Ticks;
  }
  connect(signer: Signer): Ticks__factory {
    return super.connect(signer) as Ticks__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicksInterface {
    return new utils.Interface(_abi) as TicksInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Ticks {
    return new Contract(address, _abi, signerOrProvider) as Ticks;
  }
}

export interface TicksLibraryAddresses {
  ["contracts/libraries/TickMath.sol:TickMath"]: string;
}
