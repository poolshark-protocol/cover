/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TickMath, TickMathInterface } from "../TickMath";

const _abi = [
  {
    inputs: [],
    name: "PriceOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "TickOutOfBounds",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint160",
        name: "getSqrtPriceX96",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getTickAtSqrtRatio",
    outputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "price",
        type: "uint160",
      },
    ],
    name: "validatePrice",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61086961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806326c9c807146100505780634f76c05814610065578063986cfba314610090575b600080fd5b61006361005e366004610776565b6100bb565b005b610078610073366004610776565b610115565b60405160029190910b81526020015b60405180910390f35b6100a361009e3660046107a6565b610126565b6040516001600160a01b039091168152602001610087565b6401000000006001600160a01b03821610806100f4575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03821610155b1561011257604051636e4ba61d60e01b815260040160405180910390fd5b50565b600061012082610131565b92915050565b600061012082610440565b60006401000000006001600160a01b038316108061016c575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b1561018a57604051636e4ba61d60e01b815260040160405180910390fd5b640100000000600160c01b03602083901b166fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061022757607f810383901c9150610231565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461043157886001600160a01b031661041682610440565b6001600160a01b0316111561042b5781610433565b80610433565b815b9998505050505050505050565b60008060008360020b12610457578260020b610464565b8260020b610464906107df565b9050610473620d89e7196107fb565b62ffffff1681111561049857604051633e1f710360e21b815260040160405180910390fd5b6000816001166000036104af57600160801b6104c1565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156104f5576ffff97272373d413259a46990580e213a0260801c5b6004821615610514576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610533576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610552576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610571576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610590576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156105af576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156105cf576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156105ef576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161561060f576ff3392b0822b70005940c7a398e4b70f30260801c5b61080082161561062f576fe7159475a2c29b7443b29c7fa6e889d90260801c5b61100082161561064f576fd097f3bdfd2022b8845ad8f792aa58250260801c5b61200082161561066f576fa9f746462d870fdf8a65dc1f90e061e50260801c5b61400082161561068f576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156106af576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156106d0576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156106f0576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561070f576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161561072c576b048a170391f7dc42444e8fa20260801c5b60008460020b131561074d5780600019816107495761074961081d565b0490505b640100000000810615610761576001610764565b60005b60ff16602082901c0192505050919050565b60006020828403121561078857600080fd5b81356001600160a01b038116811461079f57600080fd5b9392505050565b6000602082840312156107b857600080fd5b81358060020b811461079f57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b82016107f4576107f46107c9565b5060000390565b60008160020b627fffff198103610814576108146107c9565b60000392915050565b634e487b7160e01b600052601260045260246000fdfea26469706673582212207e8a6466a075d947eb523499c3f7e2e0f655b9f2c4db1514cda62e264c94de1864736f6c634300080d0033";

export class TickMath__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickMath> {
    return super.deploy(overrides || {}) as Promise<TickMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickMath {
    return super.attach(address) as TickMath;
  }
  connect(signer: Signer): TickMath__factory {
    return super.connect(signer) as TickMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickMathInterface {
    return new utils.Interface(_abi) as TickMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickMath {
    return new Contract(address, _abi, signerOrProvider) as TickMath;
  }
}
