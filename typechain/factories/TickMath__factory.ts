/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TickMath, TickMathInterface } from "../TickMath";

const _abi = [
  {
    inputs: [],
    name: "PriceOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "TickOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "WaitUntilEnoughObservations",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint160",
        name: "getSqrtPriceX96",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getTickAtSqrtRatio",
    outputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "price",
        type: "uint160",
      },
    ],
    name: "validatePrice",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6109a661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806326c9c807146100505780634f76c05814610065578063986cfba314610090575b600080fd5b61006361005e366004610797565b6100bb565b005b610078610073366004610797565b610115565b60405160029190910b81526020015b60405180910390f35b6100a361009e3660046107c7565b610126565b6040516001600160a01b039091168152602001610087565b6401000276a36001600160a01b03821610806100f4575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03821610155b1561011257604051636e4ba61d60e01b815260040160405180910390fd5b50565b600061012082610131565b92915050565b600061012082610461565b60006401000276a36001600160a01b038316108061016c575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b1561018a57604051636e4ba61d60e01b815260040160405180910390fd5b640100000000600160c01b03602083901b166fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061022e57610224607f82610800565b83901c915061023f565b61023981607f610800565b83901b91505b6000604061024e608084610817565b901b9050828302607f1c92508260801c80603f1b8217915083811c935050828302607f1c92508260801c80603e1b8217915083811c935050828302607f1c92508260801c80603d1b8217915083811c935050828302607f1c92508260801c80603c1b8217915083811c935050828302607f1c92508260801c80603b1b8217915083811c935050828302607f1c92508260801c80603a1b8217915083811c935050828302607f1c92508260801c8060391b8217915083811c935050828302607f1c92508260801c8060381b8217915083811c935050828302607f1c92508260801c8060371b8217915083811c935050828302607f1c92508260801c8060361b8217915083811c935050828302607f1c92508260801c8060351b8217915083811c935050828302607f1c92508260801c8060341b8217915083811c935050828302607f1c92508260801c8060331b8217915083811c935050828302607f1c92508260801c8060321b8217915050600081693627a301d71055774c856103d19190610856565b9050600060806103f16f028f6481ab7f045a5af012a19d003aaa84610817565b901d905060006080610413846fdb2df09e81959a81455e260799a0632f6108db565b901d90508060020b8260020b1461045257886001600160a01b031661043782610461565b6001600160a01b0316111561044c5781610454565b80610454565b815b9998505050505050505050565b60008060008360020b12610478578260020b610485565b8260020b6104859061091c565b9050610494620d89e719610938565b62ffffff168111156104b957604051633e1f710360e21b815260040160405180910390fd5b6000816001166000036104d057600160801b6104e2565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610516576ffff97272373d413259a46990580e213a0260801c5b6004821615610535576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610554576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610573576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610592576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156105b1576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156105d0576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156105f0576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610610576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610630576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610650576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610670576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610690576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156106b0576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156106d0576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156106f1576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610711576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610730576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161561074d576b048a170391f7dc42444e8fa20260801c5b60008460020b131561076e57806000198161076a5761076a61095a565b0490505b640100000000810615610782576001610785565b60005b60ff16602082901c0192505050919050565b6000602082840312156107a957600080fd5b81356001600160a01b03811681146107c057600080fd5b9392505050565b6000602082840312156107d957600080fd5b81358060020b81146107c057600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015610812576108126107ea565b500390565b60008083128015600160ff1b850184121615610835576108356107ea565b6001600160ff1b0384018313811615610850576108506107ea565b50500390565b60006001600160ff1b038184138284138082168684048611161561087c5761087c6107ea565b600160ff1b600087128281168783058912161561089b5761089b6107ea565b600087129250878205871284841616156108b7576108b76107ea565b878505871281841616156108cd576108cd6107ea565b505050929093029392505050565b600080821280156001600160ff1b03849003851316156108fd576108fd6107ea565b600160ff1b8390038412811615610916576109166107ea565b50500190565b6000600160ff1b8201610931576109316107ea565b5060000390565b60008160020b627fffff198103610951576109516107ea565b60000392915050565b634e487b7160e01b600052601260045260246000fdfea26469706673582212209373ac699701b1d94eb9904afac8333a1225fbd603f5c70bddb88027baf00dba64736f6c634300080d0033";

export class TickMath__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickMath> {
    return super.deploy(overrides || {}) as Promise<TickMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickMath {
    return super.attach(address) as TickMath;
  }
  connect(signer: Signer): TickMath__factory {
    return super.connect(signer) as TickMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickMathInterface {
    return new utils.Interface(_abi) as TickMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickMath {
    return new Contract(address, _abi, signerOrProvider) as TickMath;
  }
}
