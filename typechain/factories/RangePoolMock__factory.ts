/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RangePoolMock, RangePoolMockInterface } from "../RangePoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_swapFee",
        type: "uint24",
      },
      {
        internalType: "int24",
        name: "_tickSpacing",
        type: "int24",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
    ],
    name: "increaseObservationCardinalityNext",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_observationCardinality",
        type: "uint16",
      },
    ],
    name: "setObservationCardinality",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int56",
        name: "_tickCumulative0",
        type: "int56",
      },
      {
        internalType: "int56",
        name: "_tickCumulative1",
        type: "int56",
      },
    ],
    name: "setTickCumulatives",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "slot0",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint16",
        name: "observationIndex",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinality",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "feeProtocol",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "unlocked",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tickSpacing",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000da838038062000da88339818101604052810190620000379190620002c4565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610620000a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200009f9062000397565b60405180910390fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508162ffffff1660038190555080600260146101000a81548162ffffff021916908360020b62ffffff16021790555060048060006101000a81548161ffff021916908361ffff16021790555060048060026101000a81548161ffff021916908361ffff16021790555050505050620003b9565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020e82620001e1565b9050919050565b620002208162000201565b81146200022c57600080fd5b50565b600081519050620002408162000215565b92915050565b600062ffffff82169050919050565b620002608162000246565b81146200026c57600080fd5b50565b600081519050620002808162000255565b92915050565b60008160020b9050919050565b6200029e8162000286565b8114620002aa57600080fd5b50565b600081519050620002be8162000293565b92915050565b60008060008060808587031215620002e157620002e0620001dc565b5b6000620002f1878288016200022f565b945050602062000304878288016200022f565b935050604062000317878288016200026f565b92505060606200032a87828801620002ad565b91505092959194509250565b600082825260208201905092915050565b7f77726f6e6720746f6b656e206f72646572000000000000000000000000000000600082015250565b60006200037f60118362000336565b91506200038c8262000347565b602082019050919050565b60006020820190508181036000830152620003b28162000370565b9050919050565b6109df80620003c96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063915a48881161005b578063915a48881461011c578063d0c93a7c14610138578063d21220a714610156578063eb25c51f1461017457610088565b80630dfe16811461008d57806332148f67146100ab5780633850c7bd146100c7578063883bdbfd146100eb575b600080fd5b610095610190565b6040516100a291906104e6565b60405180910390f35b6100c560048036038101906100c09190610545565b6101b6565b005b6100cf6101d6565b6040516100e297969594939291906105e3565b60405180910390f35b610105600480360381019061010091906106b7565b61022f565b60405161011392919061088d565b60405180910390f35b61013660048036038101906101319190610545565b6103f5565b005b610140610415565b60405161014d91906108c4565b60405180910390f35b61015e610428565b60405161016b91906104e6565b60405180910390f35b61018e6004803603810190610189919061090b565b61044e565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600460026101000a81548161ffff021916908361ffff16021790555050565b60008060008060008060006c01000000000000000000000000600060048060009054906101000a900461ffff16600460029054906101000a900461ffff1660646001965096509650965096509650965090919293949596565b6060808383905067ffffffffffffffff81111561024f5761024e61094b565b5b60405190808252806020026020018201604052801561027d5781602001602082028036833780820191505090505b50915060048054906101000a900460060b826000815181106102a2576102a161097a565b5b602002602001019060060b908160060b815250506004600b9054906101000a900460060b826001815181106102da576102d961097a565b5b602002602001019060060b908160060b815250508383905067ffffffffffffffff81111561030b5761030a61094b565b5b6040519080825280602002602001820160405280156103395781602001602082028036833780820191505090505b50905069c91435798c9226a0e6d78160008151811061035b5761035a61097a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505069c914354b931643013aeb816001815181106103b4576103b361097a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250509250929050565b80600460006101000a81548161ffff021916908361ffff16021790555050565b600260149054906101000a900460020b81565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b816004806101000a81548166ffffffffffffff021916908360060b66ffffffffffffff160217905550806004600b6101000a81548166ffffffffffffff021916908360060b66ffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104d0826104a5565b9050919050565b6104e0816104c5565b82525050565b60006020820190506104fb60008301846104d7565b92915050565b600080fd5b600080fd5b600061ffff82169050919050565b6105228161050b565b811461052d57600080fd5b50565b60008135905061053f81610519565b92915050565b60006020828403121561055b5761055a610501565b5b600061056984828501610530565b91505092915050565b61057b816104a5565b82525050565b60008160020b9050919050565b61059781610581565b82525050565b6105a68161050b565b82525050565b600060ff82169050919050565b6105c2816105ac565b82525050565b60008115159050919050565b6105dd816105c8565b82525050565b600060e0820190506105f8600083018a610572565b610605602083018961058e565b610612604083018861059d565b61061f606083018761059d565b61062c608083018661059d565b61063960a08301856105b9565b61064660c08301846105d4565b98975050505050505050565b600080fd5b600080fd5b600080fd5b60008083601f84011261067757610676610652565b5b8235905067ffffffffffffffff81111561069457610693610657565b5b6020830191508360208202830111156106b0576106af61065c565b5b9250929050565b600080602083850312156106ce576106cd610501565b5b600083013567ffffffffffffffff8111156106ec576106eb610506565b5b6106f885828601610661565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008160060b9050919050565b61074681610730565b82525050565b6000610758838361073d565b60208301905092915050565b6000602082019050919050565b600061077c82610704565b610786818561070f565b935061079183610720565b8060005b838110156107c25781516107a9888261074c565b97506107b483610764565b925050600181019050610795565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610804816104a5565b82525050565b600061081683836107fb565b60208301905092915050565b6000602082019050919050565b600061083a826107cf565b61084481856107da565b935061084f836107eb565b8060005b83811015610880578151610867888261080a565b975061087283610822565b925050600181019050610853565b5085935050505092915050565b600060408201905081810360008301526108a78185610771565b905081810360208301526108bb818461082f565b90509392505050565b60006020820190506108d9600083018461058e565b92915050565b6108e881610730565b81146108f357600080fd5b50565b600081359050610905816108df565b92915050565b6000806040838503121561092257610921610501565b5b6000610930858286016108f6565b9250506020610941858286016108f6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220dd3a035b462e73d25dd5ada1a50a7109a84b615d04bb73f934bbc8dfbc52443f64736f6c634300080d0033";

export class RangePoolMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _token0: string,
    _token1: string,
    _swapFee: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RangePoolMock> {
    return super.deploy(
      _token0,
      _token1,
      _swapFee,
      _tickSpacing,
      overrides || {}
    ) as Promise<RangePoolMock>;
  }
  getDeployTransaction(
    _token0: string,
    _token1: string,
    _swapFee: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token0,
      _token1,
      _swapFee,
      _tickSpacing,
      overrides || {}
    );
  }
  attach(address: string): RangePoolMock {
    return super.attach(address) as RangePoolMock;
  }
  connect(signer: Signer): RangePoolMock__factory {
    return super.connect(signer) as RangePoolMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RangePoolMockInterface {
    return new utils.Interface(_abi) as RangePoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RangePoolMock {
    return new Contract(address, _abi, signerOrProvider) as RangePoolMock;
  }
}
