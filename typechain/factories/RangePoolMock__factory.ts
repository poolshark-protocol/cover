/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RangePoolMock, RangePoolMockInterface } from "../RangePoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_swapFee",
        type: "uint24",
      },
      {
        internalType: "int24",
        name: "_tickSpacing",
        type: "int24",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
    ],
    name: "increaseObservationCardinalityNext",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_observationCardinality",
        type: "uint16",
      },
    ],
    name: "setObservationCardinality",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int56",
        name: "_tickCumulative0",
        type: "int56",
      },
      {
        internalType: "int56",
        name: "_tickCumulative1",
        type: "int56",
      },
    ],
    name: "setTickCumulatives",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "slot0",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint16",
        name: "observationIndex",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinality",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "feeProtocol",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "unlocked",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tickSpacing",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109bc3803806109bc833981810160405281019061003291906101f2565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106100a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100979061025c565b60405180910390fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508162ffffff1660038190555080600260146101000a81548162ffffff021916908360020b62ffffff16021790555060048060006101000a81548161ffff021916908361ffff16021790555060048060026101000a81548161ffff021916908361ffff1602179055505050505061029a565b60008151905060018060a01b03811681146101ed57600080fd5b919050565b6000806000806080858703121561020857600080fd5b610211856101d3565b935061021f602086016101d3565b9250604085015162ffffff8116811461023757600080fd5b8092505060608501518060020b811461024f57600080fd5b8091505092959194509250565b60208152601160208201527f77726f6e6720746f6b656e206f7264657200000000000000000000000000000060408201526000606082019050919050565b610713806102a96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063915a48881161005b578063915a48881461011c578063d0c93a7c14610138578063d21220a714610156578063eb25c51f1461017457610088565b80630dfe16811461008d57806332148f67146100ab5780633850c7bd146100c7578063883bdbfd146100eb575b600080fd5b610095610190565b6040516100a291906104a5565b60405180910390f35b6100c560048036038101906100c091906104be565b6101b6565b005b6100cf6101d6565b6040516100e297969594939291906104ec565b60405180910390f35b61010560048036038101906101009190610541565b61022f565b6040516101139291906105b7565b60405180910390f35b610136600480360381019061013191906104be565b6103f5565b005b610140610415565b60405161014d9190610650565b60405180910390f35b61015e610428565b60405161016b91906104a5565b60405180910390f35b61018e6004803603810190610189919061067e565b61044e565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600460026101000a81548161ffff021916908361ffff16021790555050565b60008060008060008060006c01000000000000000000000000600060048060009054906101000a900461ffff16600460029054906101000a900461ffff1660646001965096509650965096509650965090919293949596565b6060808383905067ffffffffffffffff81111561024f5761024e6106b1565b5b60405190808252806020026020018201604052801561027d5781602001602082028036833780820191505090505b50915060048054906101000a900460060b826000815181106102a2576102a16106c7565b5b602002602001019060060b908160060b815250506004600b9054906101000a900460060b826001815181106102da576102d96106c7565b5b602002602001019060060b908160060b815250508383905067ffffffffffffffff81111561030b5761030a6106b1565b5b6040519080825280602002602001820160405280156103395781602001602082028036833780820191505090505b50905069c91435798c9226a0e6d78160008151811061035b5761035a6106c7565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505069c914354b931643013aeb816001815181106103b4576103b36106c7565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250509250929050565b80600460006101000a81548161ffff021916908361ffff16021790555050565b600260149054906101000a900460020b81565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b816004806101000a81548166ffffffffffffff021916908360060b66ffffffffffffff160217905550806004600b6101000a81548166ffffffffffffff021916908360060b66ffffffffffffff1602179055505050565b600060208201905060018060a01b038316825292915050565b6000602082840312156104d057600080fd5b813561ffff811681146104e257600080fd5b8091505092915050565b600060e08201905060018060a01b03891682528760020b602083015261ffff8088166040840152808716606084015280861660808401525060ff841660a083015282151560c083015298975050505050505050565b6000806020838503121561055457600080fd5b823567ffffffffffffffff8082111561056c57600080fd5b818501915085601f83011261058057600080fd5b81358181111561058f57600080fd5b8660208260051b85010111156105a457600080fd5b6020830194508093505050509250929050565b600060408201604083528085518083526060850191506020925082870160005b828110156105fb57815160060b8452848401935084820191506001810190506105d7565b505050838103828501528085518083528383019150838701925060005b818110156106415760018060a01b03845116835284830192508484019350600181019050610618565b50508093505050509392505050565b60006020820190508260020b825292915050565b6000813590508060060b811461067957600080fd5b919050565b6000806040838503121561069157600080fd5b61069a83610664565b91506106a860208401610664565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220d21db3d9609a84fb80926a734226fe0d6a259c7711d8fd735a8a4623815185d264736f6c634300080d0033";

export class RangePoolMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _token0: string,
    _token1: string,
    _swapFee: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RangePoolMock> {
    return super.deploy(
      _token0,
      _token1,
      _swapFee,
      _tickSpacing,
      overrides || {}
    ) as Promise<RangePoolMock>;
  }
  getDeployTransaction(
    _token0: string,
    _token1: string,
    _swapFee: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token0,
      _token1,
      _swapFee,
      _tickSpacing,
      overrides || {}
    );
  }
  attach(address: string): RangePoolMock {
    return super.attach(address) as RangePoolMock;
  }
  connect(signer: Signer): RangePoolMock__factory {
    return super.connect(signer) as RangePoolMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RangePoolMockInterface {
    return new utils.Interface(_abi) as RangePoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RangePoolMock {
    return new Contract(address, _abi, signerOrProvider) as RangePoolMock;
  }
}
