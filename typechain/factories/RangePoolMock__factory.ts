/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RangePoolMock, RangePoolMockInterface } from "../RangePoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_swapFee",
        type: "uint24",
      },
      {
        internalType: "int24",
        name: "_tickSpacing",
        type: "int24",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
    ],
    name: "increaseObservationCardinalityNext",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int56",
        name: "_tickCumulative0",
        type: "int56",
      },
      {
        internalType: "int56",
        name: "_tickCumulative1",
        type: "int56",
      },
    ],
    name: "setTickCumulatives",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "slot0",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint16",
        name: "observationIndex",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinality",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "feeProtocol",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "unlocked",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "tickSpacing",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161069338038061069383398101604081905261002f916100f7565b826001600160a01b0316846001600160a01b0316106100885760405162461bcd60e51b81526020600482015260116024820152703bb937b733903a37b5b2b71037b93232b960791b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b039586161790556001805462ffffff938416600255939094166001600160b81b031990931692909217600160a01b929091169190910217905561015f565b80516001600160a01b03811681146100f257600080fd5b919050565b6000806000806080858703121561010d57600080fd5b610116856100db565b9350610124602086016100db565b9250604085015162ffffff8116811461013c57600080fd5b8092505060608501518060020b811461015457600080fd5b939692955090935050565b6105258061016e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063883bdbfd1161005b578063883bdbfd14610121578063d0c93a7c14610142578063d21220a714610169578063eb25c51f1461017c57600080fd5b80630dfe16811461008257806332148f67146100b25780633850c7bd146100e2575b600080fd5b600054610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e06100c0366004610352565b6003805461ffff909216620100000263ffff000019909216919091179055565b005b60408051600160601b8152600060208201526004918101829052606081019190915260056080820152606460a0820152600160c082015260e0016100a9565b61013461012f36600461037d565b6101d8565b6040516100a99291906103f2565b60015461015690600160a01b900460020b81565b60405160029190910b81526020016100a9565b600154610095906001600160a01b031681565b6100e061018a366004610490565b6003805471ffffffffffffffffffffffffffff00000000191664010000000066ffffffffffffff9485160266ffffffffffffff60581b191617600160581b9290931691909102919091179055565b6060808267ffffffffffffffff8111156101f4576101f46104c3565b60405190808252806020026020018201604052801561021d578160200160208202803683370190505b509150600360049054906101000a900460060b82600081518110610243576102436104d9565b600692830b60209182029290920101526003548351600160581b90910490910b9083906001908110610277576102776104d9565b60069290920b602092830291909101909101528267ffffffffffffffff8111156102a3576102a36104c3565b6040519080825280602002602001820160405280156102cc578160200160208202803683370190505b50905069c91435798c9226a0e6d7816000815181106102ed576102ed6104d9565b60200260200101906001600160a01b031690816001600160a01b03168152505069c914354b931643013aeb8160018151811061032b5761032b6104d9565b60200260200101906001600160a01b031690816001600160a01b0316815250509250929050565b60006020828403121561036457600080fd5b813561ffff8116811461037657600080fd5b9392505050565b6000806020838503121561039057600080fd5b823567ffffffffffffffff808211156103a857600080fd5b818501915085601f8301126103bc57600080fd5b8135818111156103cb57600080fd5b8660208260051b85010111156103e057600080fd5b60209290920196919550909350505050565b604080825283519082018190526000906020906060840190828701845b8281101561042e57815160060b8452928401929084019060010161040f565b5050508381038285015284518082528583019183019060005b8181101561046c5783516001600160a01b031683529284019291840191600101610447565b5090979650505050505050565b8035600681900b811461048b57600080fd5b919050565b600080604083850312156104a357600080fd5b6104ac83610479565b91506104ba60208401610479565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea264697066735822122082b69a3564c27eb1aef2c4647a657094293eb3a0f17ac50f53ef8e66b56d500764736f6c634300080d0033";

export class RangePoolMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _token0: string,
    _token1: string,
    _swapFee: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RangePoolMock> {
    return super.deploy(
      _token0,
      _token1,
      _swapFee,
      _tickSpacing,
      overrides || {}
    ) as Promise<RangePoolMock>;
  }
  getDeployTransaction(
    _token0: string,
    _token1: string,
    _swapFee: BigNumberish,
    _tickSpacing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token0,
      _token1,
      _swapFee,
      _tickSpacing,
      overrides || {}
    );
  }
  attach(address: string): RangePoolMock {
    return super.attach(address) as RangePoolMock;
  }
  connect(signer: Signer): RangePoolMock__factory {
    return super.connect(signer) as RangePoolMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RangePoolMockInterface {
    return new utils.Interface(_abi) as RangePoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RangePoolMock {
    return new Contract(address, _abi, signerOrProvider) as RangePoolMock;
  }
}
