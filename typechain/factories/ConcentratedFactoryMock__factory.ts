/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConcentratedFactoryMock,
  ConcentratedFactoryMockInterface,
} from "../ConcentratedFactoryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    name: "feeTierTickSpacing",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    name: "getPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109ee3803806109ee83398101604081905261002f916101f6565b600180546001600160a01b031916331790556001600160a01b03818116908316106100945760405162461bcd60e51b81526020600482015260116024820152703bb937b733903a37b5b2b71037b93232b960791b604482015260640160405180910390fd5b60026020527febaffbad3b7fced837389fa2c76ef17bd16e01452243bc801329ba9c392c939f805462ffffff19908116600a179091557f8f2d796c159bb2bb788bc3f1a337a929c07b0cf1d9277451fd5f909c263c02d680548216603c1790556127106000527f5e7cc46d63c0d79d92b677239084c61b6b019c2759734090f1970fc4b4823988805490911660c8179055604051829082906101f490610139906101cd565b6001600160a01b03938416815292909116602083015262ffffff166040820152606001604051809103906000f080158015610178573d6000803e3d6000fd5b50600080546001600160a01b039283166001600160a01b03199182168117835594831682526003602090815260408084209590941683529384528282206101f483529093522080549091169091179055610229565b610622806103cc83390190565b80516001600160a01b03811681146101f157600080fd5b919050565b6000806040838503121561020957600080fd5b610212836101da565b9150610220602084016101da565b90509250929050565b610194806102386000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631698ee821461003b5780637b12f27014610092575b600080fd5b6100756100493660046100f9565b60036020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b76100a036600461013c565b600260208190526000918252604090912054900b81565b60405160029190910b8152602001610089565b80356001600160a01b03811681146100e157600080fd5b919050565b803562ffffff811681146100e157600080fd5b60008060006060848603121561010e57600080fd5b610117846100ca565b9250610125602085016100ca565b9150610133604085016100e6565b90509250925092565b60006020828403121561014e57600080fd5b610157826100e6565b939250505056fea2646970667358221220575b7865b08b75512d62ab1d17880c4613cf103dc47b37e1bcc2c584f81a68ea64736f6c634300080d0033608060405234801561001057600080fd5b5060405161062238038061062283398101604081905261002f916100e1565b816001600160a01b0316836001600160a01b0316106100885760405162461bcd60e51b81526020600482015260116024820152703bb937b733903a37b5b2b71037b93232b960791b604482015260640160405180910390fd5b600080546001600160a01b039485166001600160a01b031991821617909155600180549390941692169190911790915562ffffff16600255610130565b80516001600160a01b03811681146100dc57600080fd5b919050565b6000806000606084860312156100f657600080fd5b6100ff846100c5565b925061010d602085016100c5565b9150604084015162ffffff8116811461012557600080fd5b809150509250925092565b6104e38061013f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630dfe16811461006757806332148f67146100975780633850c7bd146100c7578063883bdbfd14610106578063d21220a714610127578063eb25c51f1461013a575b600080fd5b60005461007a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c56100a5366004610310565b6003805461ffff909216620100000263ffff000019909216919091179055565b005b60408051600160601b8152600060208201526004918101829052606081019190915260056080820152606460a0820152600160c082015260e00161008e565b61011961011436600461033b565b610196565b60405161008e9291906103b0565b60015461007a906001600160a01b031681565b6100c561014836600461044e565b6003805471ffffffffffffffffffffffffffff00000000191664010000000066ffffffffffffff9485160266ffffffffffffff60581b191617600160581b9290931691909102919091179055565b6060808267ffffffffffffffff8111156101b2576101b2610481565b6040519080825280602002602001820160405280156101db578160200160208202803683370190505b509150600360049054906101000a900460060b8260008151811061020157610201610497565b600692830b60209182029290920101526003548351600160581b90910490910b908390600190811061023557610235610497565b60069290920b602092830291909101909101528267ffffffffffffffff81111561026157610261610481565b60405190808252806020026020018201604052801561028a578160200160208202803683370190505b50905069c91435798c9226a0e6d7816000815181106102ab576102ab610497565b60200260200101906001600160a01b031690816001600160a01b03168152505069c914354b931643013aeb816001815181106102e9576102e9610497565b60200260200101906001600160a01b031690816001600160a01b0316815250509250929050565b60006020828403121561032257600080fd5b813561ffff8116811461033457600080fd5b9392505050565b6000806020838503121561034e57600080fd5b823567ffffffffffffffff8082111561036657600080fd5b818501915085601f83011261037a57600080fd5b81358181111561038957600080fd5b8660208260051b850101111561039e57600080fd5b60209290920196919550909350505050565b604080825283519082018190526000906020906060840190828701845b828110156103ec57815160060b845292840192908401906001016103cd565b5050508381038285015284518082528583019183019060005b8181101561042a5783516001600160a01b031683529284019291840191600101610405565b5090979650505050505050565b8035600681900b811461044957600080fd5b919050565b6000806040838503121561046157600080fd5b61046a83610437565b915061047860208401610437565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220ffc8d904872ea57dea98dfd836285bccd13db9dc89b77bf43f936348c47a129764736f6c634300080d0033";

export class ConcentratedFactoryMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConcentratedFactoryMock> {
    return super.deploy(
      tokenA,
      tokenB,
      overrides || {}
    ) as Promise<ConcentratedFactoryMock>;
  }
  getDeployTransaction(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenA, tokenB, overrides || {});
  }
  attach(address: string): ConcentratedFactoryMock {
    return super.attach(address) as ConcentratedFactoryMock;
  }
  connect(signer: Signer): ConcentratedFactoryMock__factory {
    return super.connect(signer) as ConcentratedFactoryMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConcentratedFactoryMockInterface {
    return new utils.Interface(_abi) as ConcentratedFactoryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConcentratedFactoryMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConcentratedFactoryMock;
  }
}
