/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IRebaseLibrary,
  IRebaseLibraryInterface,
} from "../IRebaseLibrary";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "elastic",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "base",
            type: "uint128",
          },
        ],
        internalType: "struct Rebase",
        name: "total",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
    ],
    name: "toBase",
    outputs: [
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "elastic",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "base",
            type: "uint128",
          },
        ],
        internalType: "struct Rebase",
        name: "total",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
    ],
    name: "toElastic",
    outputs: [
      {
        internalType: "uint256",
        name: "elastic",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

export class IRebaseLibrary__factory {
  static readonly abi = _abi;
  static createInterface(): IRebaseLibraryInterface {
    return new utils.Interface(_abi) as IRebaseLibraryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IRebaseLibrary {
    return new Contract(address, _abi, signerOrProvider) as IRebaseLibrary;
  }
}
