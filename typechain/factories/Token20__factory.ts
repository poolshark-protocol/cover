/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Token20, Token20Interface } from "../Token20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "tokenName",
        type: "string",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001d3638038062001d3683398181016040528101906200003791906200031c565b828281600390805190602001906200005192919062000091565b5080600490805190602001906200006a92919062000091565b50505080600560006101000a81548160ff021916908360ff1602179055505050506200041a565b8280546200009f90620003e5565b90600052602060002090601f016020900481019282620000c357600085556200010f565b82601f10620000de57805160ff19168380011785556200010f565b828001600101855582156200010f579182015b828111156200010e578251825591602001919060010190620000f1565b5b5090506200011e919062000122565b5090565b5b808211156200013d57600081600090555060010162000123565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001aa826200015f565b810181811067ffffffffffffffff82111715620001cc57620001cb62000170565b5b80604052505050565b6000620001e162000141565b9050620001ef82826200019f565b919050565b600067ffffffffffffffff82111562000212576200021162000170565b5b6200021d826200015f565b9050602081019050919050565b60005b838110156200024a5780820151818401526020810190506200022d565b838111156200025a576000848401525b50505050565b6000620002776200027184620001f4565b620001d5565b9050828152602081018484840111156200029657620002956200015a565b5b620002a38482856200022a565b509392505050565b600082601f830112620002c357620002c262000155565b5b8151620002d584826020860162000260565b91505092915050565b600060ff82169050919050565b620002f681620002de565b81146200030257600080fd5b50565b6000815190506200031681620002eb565b92915050565b6000806000606084860312156200033857620003376200014b565b5b600084015167ffffffffffffffff81111562000359576200035862000150565b5b6200036786828701620002ab565b935050602084015167ffffffffffffffff8111156200038b576200038a62000150565b5b6200039986828701620002ab565b9250506040620003ac8682870162000305565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003fe57607f821691505b602082108103620004145762000413620003b6565b5b50919050565b61190c806200042a6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342966c681161009757806395d89b411161006657806395d89b4114610284578063a457c2d7146102a2578063a9059cbb146102d2578063dd62ed3e14610302576100f5565b806342966c681461020057806370a082311461021c57806379cc67901461024c5780637a1395aa14610268576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806340c10f19146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610332565b60405161010f9190610f7d565b60405180910390f35b610132600480360381019061012d9190611038565b6103c4565b60405161013f9190611093565b60405180910390f35b6101506103e7565b60405161015d91906110bd565b60405180910390f35b610180600480360381019061017b91906110d8565b6103f1565b60405161018d9190611093565b60405180910390f35b61019e610420565b6040516101ab9190611147565b60405180910390f35b6101ce60048036038101906101c99190611038565b610437565b6040516101db9190611093565b60405180910390f35b6101fe60048036038101906101f99190611038565b61046e565b005b61021a60048036038101906102159190611162565b61047c565b005b6102366004803603810190610231919061118f565b610490565b60405161024391906110bd565b60405180910390f35b61026660048036038101906102619190611038565b6104d8565b005b610282600480360381019061027d91906111e8565b6104f8565b005b61028c610516565b6040516102999190610f7d565b60405180910390f35b6102bc60048036038101906102b79190611038565b6105a8565b6040516102c99190611093565b60405180910390f35b6102ec60048036038101906102e79190611038565b61061f565b6040516102f99190611093565b60405180910390f35b61031c60048036038101906103179190611215565b610642565b60405161032991906110bd565b60405180910390f35b60606003805461034190611284565b80601f016020809104026020016040519081016040528092919081815260200182805461036d90611284565b80156103ba5780601f1061038f576101008083540402835291602001916103ba565b820191906000526020600020905b81548152906001019060200180831161039d57829003601f168201915b5050505050905090565b6000806103cf6106c9565b90506103dc8185856106d1565b600191505092915050565b6000600254905090565b6000806103fc6106c9565b905061040985828561089a565b610414858585610926565b60019150509392505050565b6000600560009054906101000a900460ff16905090565b6000806104426106c9565b90506104638185856104548589610642565b61045e91906112e4565b6106d1565b600191505092915050565b6104788282610ba5565b5050565b61048d6104876106c9565b82610d04565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104ea826104e46106c9565b8361089a565b6104f48282610d04565b5050565b80600560006101000a81548160ff021916908360ff16021790555050565b60606004805461052590611284565b80601f016020809104026020016040519081016040528092919081815260200182805461055190611284565b801561059e5780601f106105735761010080835404028352916020019161059e565b820191906000526020600020905b81548152906001019060200180831161058157829003601f168201915b5050505050905090565b6000806105b36106c9565b905060006105c18286610642565b905083811015610606576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fd906113ac565b60405180910390fd5b61061382868684036106d1565b60019250505092915050565b60008061062a6106c9565b9050610637818585610926565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610740576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107379061143e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a6906114d0565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161088d91906110bd565b60405180910390a3505050565b60006108a68484610642565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146109205781811015610912576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109099061153c565b60405180910390fd5b61091f84848484036106d1565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098c906115ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90611660565b60405180910390fd5b610a0f838383610eda565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c906116f2565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b2891906112e4565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b8c91906110bd565b60405180910390a3610b9f848484610edf565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b9061175e565b60405180910390fd5b610c2060008383610eda565b8060026000828254610c3291906112e4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c8791906112e4565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610cec91906110bd565b60405180910390a3610d0060008383610edf565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6a906117f0565b60405180910390fd5b610d7f82600083610eda565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfc90611882565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610e5c91906118a2565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ec191906110bd565b60405180910390a3610ed583600084610edf565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f1e578082015181840152602081019050610f03565b83811115610f2d576000848401525b50505050565b6000601f19601f8301169050919050565b6000610f4f82610ee4565b610f598185610eef565b9350610f69818560208601610f00565b610f7281610f33565b840191505092915050565b60006020820190508181036000830152610f978184610f44565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fcf82610fa4565b9050919050565b610fdf81610fc4565b8114610fea57600080fd5b50565b600081359050610ffc81610fd6565b92915050565b6000819050919050565b61101581611002565b811461102057600080fd5b50565b6000813590506110328161100c565b92915050565b6000806040838503121561104f5761104e610f9f565b5b600061105d85828601610fed565b925050602061106e85828601611023565b9150509250929050565b60008115159050919050565b61108d81611078565b82525050565b60006020820190506110a86000830184611084565b92915050565b6110b781611002565b82525050565b60006020820190506110d260008301846110ae565b92915050565b6000806000606084860312156110f1576110f0610f9f565b5b60006110ff86828701610fed565b935050602061111086828701610fed565b925050604061112186828701611023565b9150509250925092565b600060ff82169050919050565b6111418161112b565b82525050565b600060208201905061115c6000830184611138565b92915050565b60006020828403121561117857611177610f9f565b5b600061118684828501611023565b91505092915050565b6000602082840312156111a5576111a4610f9f565b5b60006111b384828501610fed565b91505092915050565b6111c58161112b565b81146111d057600080fd5b50565b6000813590506111e2816111bc565b92915050565b6000602082840312156111fe576111fd610f9f565b5b600061120c848285016111d3565b91505092915050565b6000806040838503121561122c5761122b610f9f565b5b600061123a85828601610fed565b925050602061124b85828601610fed565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061129c57607f821691505b6020821081036112af576112ae611255565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ef82611002565b91506112fa83611002565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561132f5761132e6112b5565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611396602583610eef565b91506113a18261133a565b604082019050919050565b600060208201905081810360008301526113c581611389565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611428602483610eef565b9150611433826113cc565b604082019050919050565b600060208201905081810360008301526114578161141b565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006114ba602283610eef565b91506114c58261145e565b604082019050919050565b600060208201905081810360008301526114e9816114ad565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611526601d83610eef565b9150611531826114f0565b602082019050919050565b6000602082019050818103600083015261155581611519565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006115b8602583610eef565b91506115c38261155c565b604082019050919050565b600060208201905081810360008301526115e7816115ab565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061164a602383610eef565b9150611655826115ee565b604082019050919050565b600060208201905081810360008301526116798161163d565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006116dc602683610eef565b91506116e782611680565b604082019050919050565b6000602082019050818103600083015261170b816116cf565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611748601f83610eef565b915061175382611712565b602082019050919050565b600060208201905081810360008301526117778161173b565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006117da602183610eef565b91506117e58261177e565b604082019050919050565b60006020820190508181036000830152611809816117cd565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061186c602283610eef565b915061187782611810565b604082019050919050565b6000602082019050818103600083015261189b8161185f565b9050919050565b60006118ad82611002565b91506118b883611002565b9250828210156118cb576118ca6112b5565b5b82820390509291505056fea2646970667358221220d9d59bf94621b518efce2429debcf4b2412fc371a0fe7173f53e9d1a21b8b23164736f6c634300080d0033";

export class Token20__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    tokenName: string,
    tokenSymbol: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token20> {
    return super.deploy(
      tokenName,
      tokenSymbol,
      decimals_,
      overrides || {}
    ) as Promise<Token20>;
  }
  getDeployTransaction(
    tokenName: string,
    tokenSymbol: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      tokenName,
      tokenSymbol,
      decimals_,
      overrides || {}
    );
  }
  attach(address: string): Token20 {
    return super.attach(address) as Token20;
  }
  connect(signer: Signer): Token20__factory {
    return super.connect(signer) as Token20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Token20Interface {
    return new utils.Interface(_abi) as Token20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Token20 {
    return new Contract(address, _abi, signerOrProvider) as Token20;
  }
}
