/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConcentratedPoolMock,
  ConcentratedPoolMockInterface,
} from "../ConcentratedPoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
    ],
    name: "increaseObservationCardinalityNext",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "slot0",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint16",
        name: "observationIndex",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinality",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "feeProtocol",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "unlocked",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161046838038061046883398101604081905261002f916100d6565b816001600160a01b0316836001600160a01b0316106100885760405162461bcd60e51b81526020600482015260116024820152703bb937b733903a37b5b2b71037b93232b960791b604482015260640160405180910390fd5b50600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055610125565b80516001600160a01b03811681146100d157600080fd5b919050565b6000806000606084860312156100eb57600080fd5b6100f4846100ba565b9250610102602085016100ba565b9150604084015162ffffff8116811461011a57600080fd5b809150509250925092565b610334806101346000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806332148f67146100465780633850c7bd14610078578063883bdbfd146100bc575b600080fd5b6100766100543660046101c1565b6001805461ffff909216600160b01b0261ffff60b01b19909216919091179055565b005b60408051600160601b8152600060208201526004918101829052606081019190915260056080820152606460a0820152600160c082015260e0015b60405180910390f35b6100cf6100ca3660046101ec565b6100dd565b6040516100b3929190610261565b606080650813acb03dcc19826000815181106100fb576100fb6102e8565b602002602001019060060b908160060b81525050650813ab34c4a4198260018151811061012a5761012a6102e8565b602002602001019060060b908160060b8152505069c91435798c9226a0e6d78160008151811061015c5761015c6102e8565b60200260200101906001600160a01b031690816001600160a01b03168152505069c914354b931643013aeb8160018151811061019a5761019a6102e8565b60200260200101906001600160a01b031690816001600160a01b0316815250509250929050565b6000602082840312156101d357600080fd5b813561ffff811681146101e557600080fd5b9392505050565b600080602083850312156101ff57600080fd5b823567ffffffffffffffff8082111561021757600080fd5b818501915085601f83011261022b57600080fd5b81358181111561023a57600080fd5b8660208260051b850101111561024f57600080fd5b60209290920196919550909350505050565b604080825283519082018190526000906020906060840190828701845b8281101561029d57815160060b8452928401929084019060010161027e565b5050508381038285015284518082528583019183019060005b818110156102db5783516001600160a01b0316835292840192918401916001016102b6565b5090979650505050505050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212207497b9250107983392bd2f1d16c3e70425afb60a282d730d0c75aba52ac02afd64736f6c634300080d0033";

export class ConcentratedPoolMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    tokenA: string,
    tokenB: string,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConcentratedPoolMock> {
    return super.deploy(
      tokenA,
      tokenB,
      fee,
      overrides || {}
    ) as Promise<ConcentratedPoolMock>;
  }
  getDeployTransaction(
    tokenA: string,
    tokenB: string,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenA, tokenB, fee, overrides || {});
  }
  attach(address: string): ConcentratedPoolMock {
    return super.attach(address) as ConcentratedPoolMock;
  }
  connect(signer: Signer): ConcentratedPoolMock__factory {
    return super.connect(signer) as ConcentratedPoolMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConcentratedPoolMockInterface {
    return new utils.Interface(_abi) as ConcentratedPoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConcentratedPoolMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConcentratedPoolMock;
  }
}
