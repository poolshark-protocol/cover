/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConcentratedPoolMock,
  ConcentratedPoolMockInterface,
} from "../ConcentratedPoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_swapFee",
        type: "uint24",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
    ],
    name: "increaseObservationCardinalityNext",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int56",
        name: "_tickCumulative0",
        type: "int56",
      },
      {
        internalType: "int56",
        name: "_tickCumulative1",
        type: "int56",
      },
    ],
    name: "setTickCumulatives",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "slot0",
    outputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        internalType: "uint16",
        name: "observationIndex",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinality",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "cardinalityNext",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "feeProtocol",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "unlocked",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105ce3803806105ce83398101604081905261002f916100e1565b816001600160a01b0316836001600160a01b0316106100885760405162461bcd60e51b81526020600482015260116024820152703bb937b733903a37b5b2b71037b93232b960791b604482015260640160405180910390fd5b600080546001600160a01b039485166001600160a01b031991821617909155600180549390941692169190911790915562ffffff16600255610130565b80516001600160a01b03811681146100dc57600080fd5b919050565b6000806000606084860312156100f657600080fd5b6100ff846100c5565b925061010d602085016100c5565b9150604084015162ffffff8116811461012557600080fd5b809150509250925092565b61048f8061013f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806332148f67146100515780633850c7bd14610081578063883bdbfd146100c5578063eb25c51f146100e6575b600080fd5b61007f61005f3660046102bc565b6003805461ffff909216620100000263ffff000019909216919091179055565b005b60408051600160601b8152600060208201526004918101829052606081019190915260056080820152606460a0820152600160c082015260e0015b60405180910390f35b6100d86100d33660046102e7565b610142565b6040516100bc92919061035c565b61007f6100f43660046103fa565b6003805471ffffffffffffffffffffffffffff00000000191664010000000066ffffffffffffff9485160266ffffffffffffff60581b191617600160581b9290931691909102919091179055565b6060808267ffffffffffffffff81111561015e5761015e61042d565b604051908082528060200260200182016040528015610187578160200160208202803683370190505b509150600360049054906101000a900460060b826000815181106101ad576101ad610443565b600692830b60209182029290920101526003548351600160581b90910490910b90839060019081106101e1576101e1610443565b60069290920b602092830291909101909101528267ffffffffffffffff81111561020d5761020d61042d565b604051908082528060200260200182016040528015610236578160200160208202803683370190505b50905069c91435798c9226a0e6d78160008151811061025757610257610443565b60200260200101906001600160a01b031690816001600160a01b03168152505069c914354b931643013aeb8160018151811061029557610295610443565b60200260200101906001600160a01b031690816001600160a01b0316815250509250929050565b6000602082840312156102ce57600080fd5b813561ffff811681146102e057600080fd5b9392505050565b600080602083850312156102fa57600080fd5b823567ffffffffffffffff8082111561031257600080fd5b818501915085601f83011261032657600080fd5b81358181111561033557600080fd5b8660208260051b850101111561034a57600080fd5b60209290920196919550909350505050565b604080825283519082018190526000906020906060840190828701845b8281101561039857815160060b84529284019290840190600101610379565b5050508381038285015284518082528583019183019060005b818110156103d65783516001600160a01b0316835292840192918401916001016103b1565b5090979650505050505050565b8035600681900b81146103f557600080fd5b919050565b6000806040838503121561040d57600080fd5b610416836103e3565b9150610424602084016103e3565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220738aebd94c39d7d3d9ad965dc79f8a063ab3b8633ae915e801ec684f8ff00d5664736f6c634300080d0033";

export class ConcentratedPoolMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    tokenA: string,
    tokenB: string,
    _swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConcentratedPoolMock> {
    return super.deploy(
      tokenA,
      tokenB,
      _swapFee,
      overrides || {}
    ) as Promise<ConcentratedPoolMock>;
  }
  getDeployTransaction(
    tokenA: string,
    tokenB: string,
    _swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      tokenA,
      tokenB,
      _swapFee,
      overrides || {}
    );
  }
  attach(address: string): ConcentratedPoolMock {
    return super.attach(address) as ConcentratedPoolMock;
  }
  connect(signer: Signer): ConcentratedPoolMock__factory {
    return super.connect(signer) as ConcentratedPoolMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConcentratedPoolMockInterface {
    return new utils.Interface(_abi) as ConcentratedPoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConcentratedPoolMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConcentratedPoolMock;
  }
}
