/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TicksInterface extends ethers.utils.Interface {
  functions: {
    "quote(bool,uint160,(uint8,uint16,int16,uint16,int24,uint32,uint32,uint128,uint160),(uint256,uint256,uint256,uint256))": FunctionFragment;
    "rollover(int24,int24,uint256,uint256,uint128,uint128,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "quote",
    values: [
      boolean,
      BigNumberish,
      {
        unlocked: BigNumberish;
        swapFee: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        latestTick: BigNumberish;
        lastBlockNumber: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
      },
      {
        price: BigNumberish;
        liquidity: BigNumberish;
        feeAmount: BigNumberish;
        input: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rollover",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;

  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollover", data: BytesLike): Result;

  events: {};
}

export class Ticks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TicksInterface;

  functions: {
    quote(
      zeroForOne: boolean,
      priceLimit: BigNumberish,
      state: {
        unlocked: BigNumberish;
        swapFee: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        latestTick: BigNumberish;
        lastBlockNumber: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
      },
      cache: {
        price: BigNumberish;
        liquidity: BigNumberish;
        feeAmount: BigNumberish;
        input: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          feeAmount: BigNumber;
          input: BigNumber;
        },
        BigNumber
      ] & { amountOut: BigNumber }
    >;

    rollover(
      nextTickToCross: BigNumberish,
      nextTickToAccum: BigNumberish,
      currentPrice: BigNumberish,
      currentLiquidity: BigNumberish,
      amountInDelta: BigNumberish,
      amountOutDelta: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  quote(
    zeroForOne: boolean,
    priceLimit: BigNumberish,
    state: {
      unlocked: BigNumberish;
      swapFee: BigNumberish;
      tickSpread: BigNumberish;
      twapLength: BigNumberish;
      latestTick: BigNumberish;
      lastBlockNumber: BigNumberish;
      accumEpoch: BigNumberish;
      liquidityGlobal: BigNumberish;
      latestPrice: BigNumberish;
    },
    cache: {
      price: BigNumberish;
      liquidity: BigNumberish;
      feeAmount: BigNumberish;
      input: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        feeAmount: BigNumber;
        input: BigNumber;
      },
      BigNumber
    ] & { amountOut: BigNumber }
  >;

  rollover(
    nextTickToCross: BigNumberish,
    nextTickToAccum: BigNumberish,
    currentPrice: BigNumberish,
    currentLiquidity: BigNumberish,
    amountInDelta: BigNumberish,
    amountOutDelta: BigNumberish,
    isPool0: boolean,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  callStatic: {
    quote(
      zeroForOne: boolean,
      priceLimit: BigNumberish,
      state: {
        unlocked: BigNumberish;
        swapFee: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        latestTick: BigNumberish;
        lastBlockNumber: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
      },
      cache: {
        price: BigNumberish;
        liquidity: BigNumberish;
        feeAmount: BigNumberish;
        input: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          feeAmount: BigNumber;
          input: BigNumber;
        },
        BigNumber
      ] & { amountOut: BigNumber }
    >;

    rollover(
      nextTickToCross: BigNumberish,
      nextTickToAccum: BigNumberish,
      currentPrice: BigNumberish,
      currentLiquidity: BigNumberish,
      amountInDelta: BigNumberish,
      amountOutDelta: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    quote(
      zeroForOne: boolean,
      priceLimit: BigNumberish,
      state: {
        unlocked: BigNumberish;
        swapFee: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        latestTick: BigNumberish;
        lastBlockNumber: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
      },
      cache: {
        price: BigNumberish;
        liquidity: BigNumberish;
        feeAmount: BigNumberish;
        input: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rollover(
      nextTickToCross: BigNumberish,
      nextTickToAccum: BigNumberish,
      currentPrice: BigNumberish,
      currentLiquidity: BigNumberish,
      amountInDelta: BigNumberish,
      amountOutDelta: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    quote(
      zeroForOne: boolean,
      priceLimit: BigNumberish,
      state: {
        unlocked: BigNumberish;
        swapFee: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        latestTick: BigNumberish;
        lastBlockNumber: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
      },
      cache: {
        price: BigNumberish;
        liquidity: BigNumberish;
        feeAmount: BigNumberish;
        input: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rollover(
      nextTickToCross: BigNumberish,
      nextTickToAccum: BigNumberish,
      currentPrice: BigNumberish,
      currentLiquidity: BigNumberish,
      amountInDelta: BigNumberish,
      amountOutDelta: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
