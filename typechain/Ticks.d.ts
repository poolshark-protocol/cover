/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TicksInterface extends ethers.utils.Interface {
  functions: {
    "diluteCarry((int128,uint128,uint128,uint128,uint128,uint64,uint64),(int24,int24,uint32,uint64))": FunctionFragment;
    "quote(bool,uint160,(uint8,int16,uint16,uint16,int24,uint32,uint32,uint32,uint32,uint128,uint160,IRangePool),(uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "diluteCarry",
    values: [
      {
        liquidityDelta: BigNumberish;
        liquidityDeltaMinus: BigNumberish;
        liquidityDeltaMinusInactive: BigNumberish;
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaCarryPercent: BigNumberish;
        amountOutDeltaCarryPercent: BigNumberish;
      },
      {
        previousTick: BigNumberish;
        nextTick: BigNumberish;
        accumEpochLast: BigNumberish;
        liquidityDeltaPlusStashPercent: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [
      boolean,
      BigNumberish,
      {
        unlocked: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        latestTick: BigNumberish;
        genesisBlock: BigNumberish;
        lastBlock: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
        inputPool: string;
      },
      {
        price: BigNumberish;
        liquidity: BigNumberish;
        input: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "diluteCarry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;

  events: {};
}

export class Ticks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TicksInterface;

  functions: {
    diluteCarry(
      tick: {
        liquidityDelta: BigNumberish;
        liquidityDeltaMinus: BigNumberish;
        liquidityDeltaMinusInactive: BigNumberish;
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaCarryPercent: BigNumberish;
        amountOutDeltaCarryPercent: BigNumberish;
      },
      tickNode: {
        previousTick: BigNumberish;
        nextTick: BigNumberish;
        accumEpochLast: BigNumberish;
        liquidityDeltaPlusStashPercent: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          liquidityDelta: BigNumber;
          liquidityDeltaMinus: BigNumber;
          liquidityDeltaMinusInactive: BigNumber;
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaCarryPercent: BigNumber;
          amountOutDeltaCarryPercent: BigNumber;
        },
        [number, number, number, BigNumber] & {
          previousTick: number;
          nextTick: number;
          accumEpochLast: number;
          liquidityDeltaPlusStashPercent: BigNumber;
        }
      ]
    >;

    quote(
      zeroForOne: boolean,
      priceLimit: BigNumberish,
      state: {
        unlocked: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        latestTick: BigNumberish;
        genesisBlock: BigNumberish;
        lastBlock: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
        inputPool: string;
      },
      cache: {
        price: BigNumberish;
        liquidity: BigNumberish;
        input: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          price: BigNumber;
          liquidity: BigNumber;
          input: BigNumber;
          inputBoosted: BigNumber;
          auctionDepth: BigNumber;
          auctionBoost: BigNumber;
          amountInDelta: BigNumber;
        },
        BigNumber
      ] & { amountOut: BigNumber }
    >;
  };

  diluteCarry(
    tick: {
      liquidityDelta: BigNumberish;
      liquidityDeltaMinus: BigNumberish;
      liquidityDeltaMinusInactive: BigNumberish;
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaCarryPercent: BigNumberish;
      amountOutDeltaCarryPercent: BigNumberish;
    },
    tickNode: {
      previousTick: BigNumberish;
      nextTick: BigNumberish;
      accumEpochLast: BigNumberish;
      liquidityDeltaPlusStashPercent: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidityDelta: BigNumber;
        liquidityDeltaMinus: BigNumber;
        liquidityDeltaMinusInactive: BigNumber;
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaCarryPercent: BigNumber;
        amountOutDeltaCarryPercent: BigNumber;
      },
      [number, number, number, BigNumber] & {
        previousTick: number;
        nextTick: number;
        accumEpochLast: number;
        liquidityDeltaPlusStashPercent: BigNumber;
      }
    ]
  >;

  quote(
    zeroForOne: boolean,
    priceLimit: BigNumberish,
    state: {
      unlocked: BigNumberish;
      tickSpread: BigNumberish;
      twapLength: BigNumberish;
      auctionLength: BigNumberish;
      latestTick: BigNumberish;
      genesisBlock: BigNumberish;
      lastBlock: BigNumberish;
      auctionStart: BigNumberish;
      accumEpoch: BigNumberish;
      liquidityGlobal: BigNumberish;
      latestPrice: BigNumberish;
      inputPool: string;
    },
    cache: {
      price: BigNumberish;
      liquidity: BigNumberish;
      input: BigNumberish;
      inputBoosted: BigNumberish;
      auctionDepth: BigNumberish;
      auctionBoost: BigNumberish;
      amountInDelta: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        price: BigNumber;
        liquidity: BigNumber;
        input: BigNumber;
        inputBoosted: BigNumber;
        auctionDepth: BigNumber;
        auctionBoost: BigNumber;
        amountInDelta: BigNumber;
      },
      BigNumber
    ] & { amountOut: BigNumber }
  >;

  callStatic: {
    diluteCarry(
      tick: {
        liquidityDelta: BigNumberish;
        liquidityDeltaMinus: BigNumberish;
        liquidityDeltaMinusInactive: BigNumberish;
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaCarryPercent: BigNumberish;
        amountOutDeltaCarryPercent: BigNumberish;
      },
      tickNode: {
        previousTick: BigNumberish;
        nextTick: BigNumberish;
        accumEpochLast: BigNumberish;
        liquidityDeltaPlusStashPercent: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          liquidityDelta: BigNumber;
          liquidityDeltaMinus: BigNumber;
          liquidityDeltaMinusInactive: BigNumber;
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaCarryPercent: BigNumber;
          amountOutDeltaCarryPercent: BigNumber;
        },
        [number, number, number, BigNumber] & {
          previousTick: number;
          nextTick: number;
          accumEpochLast: number;
          liquidityDeltaPlusStashPercent: BigNumber;
        }
      ]
    >;

    quote(
      zeroForOne: boolean,
      priceLimit: BigNumberish,
      state: {
        unlocked: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        latestTick: BigNumberish;
        genesisBlock: BigNumberish;
        lastBlock: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
        inputPool: string;
      },
      cache: {
        price: BigNumberish;
        liquidity: BigNumberish;
        input: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          price: BigNumber;
          liquidity: BigNumber;
          input: BigNumber;
          inputBoosted: BigNumber;
          auctionDepth: BigNumber;
          auctionBoost: BigNumber;
          amountInDelta: BigNumber;
        },
        BigNumber
      ] & { amountOut: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    diluteCarry(
      tick: {
        liquidityDelta: BigNumberish;
        liquidityDeltaMinus: BigNumberish;
        liquidityDeltaMinusInactive: BigNumberish;
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaCarryPercent: BigNumberish;
        amountOutDeltaCarryPercent: BigNumberish;
      },
      tickNode: {
        previousTick: BigNumberish;
        nextTick: BigNumberish;
        accumEpochLast: BigNumberish;
        liquidityDeltaPlusStashPercent: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      zeroForOne: boolean,
      priceLimit: BigNumberish,
      state: {
        unlocked: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        latestTick: BigNumberish;
        genesisBlock: BigNumberish;
        lastBlock: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
        inputPool: string;
      },
      cache: {
        price: BigNumberish;
        liquidity: BigNumberish;
        input: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diluteCarry(
      tick: {
        liquidityDelta: BigNumberish;
        liquidityDeltaMinus: BigNumberish;
        liquidityDeltaMinusInactive: BigNumberish;
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaCarryPercent: BigNumberish;
        amountOutDeltaCarryPercent: BigNumberish;
      },
      tickNode: {
        previousTick: BigNumberish;
        nextTick: BigNumberish;
        accumEpochLast: BigNumberish;
        liquidityDeltaPlusStashPercent: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      zeroForOne: boolean,
      priceLimit: BigNumberish,
      state: {
        unlocked: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        latestTick: BigNumberish;
        genesisBlock: BigNumberish;
        lastBlock: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        liquidityGlobal: BigNumberish;
        latestPrice: BigNumberish;
        inputPool: string;
      },
      cache: {
        price: BigNumberish;
        liquidity: BigNumberish;
        input: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
