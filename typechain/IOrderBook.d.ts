/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IOrderBookInterface extends ethers.utils.Interface {
  functions: {
    "closeOrder(string)": FunctionFragment;
    "openOrder(uint128,uint128,address,address,bool,bool)": FunctionFragment;
    "processCloseOrders(address[],address[],uint256[],bytes32[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "closeOrder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "openOrder",
    values: [BigNumberish, BigNumberish, string, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "processCloseOrders",
    values: [string[], string[], BigNumberish[], BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "closeOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processCloseOrders",
    data: BytesLike
  ): Result;

  events: {
    "CloseOrder(address,string)": EventFragment;
    "OpenOrder(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CloseOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenOrder"): EventFragment;
}

export type CloseOrderEvent = TypedEvent<
  [string, string] & { user: string; orderId: string }
>;

export type OpenOrderEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    user: string;
    fromToken: string;
    destToken: string;
    fromAmount: BigNumber;
    destAmount: BigNumber;
  }
>;

export class IOrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOrderBookInterface;

  functions: {
    closeOrder(
      orderTxn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openOrder(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      destToken: string,
      tryInstant: boolean,
      leaveOverfill: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processCloseOrders(
      user: string[],
      token: string[],
      amount: BigNumberish[],
      reservationTxn: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  closeOrder(
    orderTxn: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openOrder(
    fromAmount: BigNumberish,
    destAmount: BigNumberish,
    fromToken: string,
    destToken: string,
    tryInstant: boolean,
    leaveOverfill: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processCloseOrders(
    user: string[],
    token: string[],
    amount: BigNumberish[],
    reservationTxn: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    closeOrder(orderTxn: string, overrides?: CallOverrides): Promise<void>;

    openOrder(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      destToken: string,
      tryInstant: boolean,
      leaveOverfill: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    processCloseOrders(
      user: string[],
      token: string[],
      amount: BigNumberish[],
      reservationTxn: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CloseOrder(address,string)"(
      user?: null,
      orderId?: null
    ): TypedEventFilter<[string, string], { user: string; orderId: string }>;

    CloseOrder(
      user?: null,
      orderId?: null
    ): TypedEventFilter<[string, string], { user: string; orderId: string }>;

    "OpenOrder(address,address,address,uint256,uint256)"(
      user?: null,
      fromToken?: null,
      destToken?: null,
      fromAmount?: null,
      destAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        user: string;
        fromToken: string;
        destToken: string;
        fromAmount: BigNumber;
        destAmount: BigNumber;
      }
    >;

    OpenOrder(
      user?: null,
      fromToken?: null,
      destToken?: null,
      fromAmount?: null,
      destAmount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        user: string;
        fromToken: string;
        destToken: string;
        fromAmount: BigNumber;
        destAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    closeOrder(
      orderTxn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openOrder(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      destToken: string,
      tryInstant: boolean,
      leaveOverfill: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processCloseOrders(
      user: string[],
      token: string[],
      amount: BigNumberish[],
      reservationTxn: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeOrder(
      orderTxn: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openOrder(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      destToken: string,
      tryInstant: boolean,
      leaveOverfill: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processCloseOrders(
      user: string[],
      token: string[],
      amount: BigNumberish[],
      reservationTxn: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
