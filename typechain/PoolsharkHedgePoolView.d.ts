/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolsharkHedgePoolViewInterface extends ethers.utils.Interface {
  functions: {
    "feeGrowthGlobal0()": FunctionFragment;
    "feeGrowthGlobal0Last()": FunctionFragment;
    "feeGrowthGlobal1()": FunctionFragment;
    "feeGrowthGlobal1Last()": FunctionFragment;
    "getPriceAndNearestTicks()": FunctionFragment;
    "getSecondsGrowthAndLastObservation()": FunctionFragment;
    "getTokenProtocolFees()": FunctionFragment;
    "liquidity0()": FunctionFragment;
    "liquidity1()": FunctionFragment;
    "positions(address,int24,int24,bool)": FunctionFragment;
    "ticks(int24)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "feeGrowthGlobal0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal0Last",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGrowthGlobal1Last",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceAndNearestTicks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondsGrowthAndLastObservation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidity0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidity1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal0Last",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGrowthGlobal1Last",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceAndNearestTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondsGrowthAndLastObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidity1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;

  events: {};
}

export class PoolsharkHedgePoolView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolsharkHedgePoolViewInterface;

  functions: {
    feeGrowthGlobal0(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGrowthGlobal0Last(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGrowthGlobal1Last(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        _price0: BigNumber;
        _price1: BigNumber;
        _nearestTick0: number;
        _nearestTick1: number;
      }
    >;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        _secondsGrowthGlobal: BigNumber;
        _lastObservation: number;
      }
    >;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _token0ProtocolFee: BigNumber;
        _token1ProtocolFee: BigNumber;
      }
    >;

    liquidity0(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidity1(overrides?: CallOverrides): Promise<[BigNumber]>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthGlobalLast: BigNumber;
        highestTickClaimed: number;
        amountClaimed: BigNumber;
      }
    >;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        previousTick: number;
        nextTick: number;
        amount0: BigNumber;
        amount1: BigNumber;
        liquidity0: BigNumber;
        liquidity1: BigNumber;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
        averageSqrtPrice0: BigNumber;
        averageSqrtPrice1: BigNumber;
        secondsGrowthOutside: BigNumber;
      }
    >;
  };

  feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

  feeGrowthGlobal0Last(overrides?: CallOverrides): Promise<BigNumber>;

  feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

  feeGrowthGlobal1Last(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceAndNearestTicks(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number] & {
      _price0: BigNumber;
      _price1: BigNumber;
      _nearestTick0: number;
      _nearestTick1: number;
    }
  >;

  getSecondsGrowthAndLastObservation(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      _secondsGrowthGlobal: BigNumber;
      _lastObservation: number;
    }
  >;

  getTokenProtocolFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _token0ProtocolFee: BigNumber;
      _token1ProtocolFee: BigNumber;
    }
  >;

  liquidity0(overrides?: CallOverrides): Promise<BigNumber>;

  liquidity1(overrides?: CallOverrides): Promise<BigNumber>;

  positions(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      liquidity: BigNumber;
      feeGrowthGlobalLast: BigNumber;
      highestTickClaimed: number;
      amountClaimed: BigNumber;
    }
  >;

  ticks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      previousTick: number;
      nextTick: number;
      amount0: BigNumber;
      amount1: BigNumber;
      liquidity0: BigNumber;
      liquidity1: BigNumber;
      feeGrowthGlobal0: BigNumber;
      feeGrowthGlobal1: BigNumber;
      averageSqrtPrice0: BigNumber;
      averageSqrtPrice1: BigNumber;
      secondsGrowthOutside: BigNumber;
    }
  >;

  callStatic: {
    feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal0Last(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1Last(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number] & {
        _price0: BigNumber;
        _price1: BigNumber;
        _nearestTick0: number;
        _nearestTick1: number;
      }
    >;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        _secondsGrowthGlobal: BigNumber;
        _lastObservation: number;
      }
    >;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _token0ProtocolFee: BigNumber;
        _token1ProtocolFee: BigNumber;
      }
    >;

    liquidity0(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity1(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthGlobalLast: BigNumber;
        highestTickClaimed: number;
        amountClaimed: BigNumber;
      }
    >;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        previousTick: number;
        nextTick: number;
        amount0: BigNumber;
        amount1: BigNumber;
        liquidity0: BigNumber;
        liquidity1: BigNumber;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
        averageSqrtPrice0: BigNumber;
        averageSqrtPrice1: BigNumber;
        secondsGrowthOutside: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    feeGrowthGlobal0(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal0Last(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<BigNumber>;

    feeGrowthGlobal1Last(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceAndNearestTicks(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenProtocolFees(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity0(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity1(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    feeGrowthGlobal0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGrowthGlobal0Last(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeGrowthGlobal1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGrowthGlobal1Last(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceAndNearestTicks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondsGrowthAndLastObservation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenProtocolFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidity1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
