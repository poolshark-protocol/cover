/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderBookBaseInterface extends ethers.utils.Interface {
  functions: {
    "getOrderKey(address,bytes32,uint256)": FunctionFragment;
    "orders(bytes32)": FunctionFragment;
    "pages(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getOrderKey",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "orders", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "pages", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "getOrderKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pages", data: BytesLike): Result;

  events: {
    "Fill(bytes32,uint256)": EventFragment;
    "LiquidityProvided(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Fill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityProvided"): EventFragment;
}

export type FillEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; newOffset: BigNumber }
>;

export type LiquidityProvidedEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; endOffset: BigNumber }
>;

export class OrderBookBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderBookBaseInterface;

  functions: {
    getOrderKey(
      owner: string,
      pageKey: BytesLike,
      endOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        page: string;
        startOffset: BigNumber;
        endOffset: BigNumber;
        nextCancelPtr: string;
        overflowCounter: BigNumber;
      }
    >;

    pages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        BigNumber
      ] & {
        price: BigNumber;
        currentOffset: BigNumber;
        latestOrder: string;
        nextPage: string;
        prevPage: string;
        newestCancelPtr: string;
        oldestCancelPtr: string;
        overflowCounter: BigNumber;
      }
    >;
  };

  getOrderKey(
    owner: string,
    pageKey: BytesLike,
    endOffset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  orders(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber] & {
      page: string;
      startOffset: BigNumber;
      endOffset: BigNumber;
      nextCancelPtr: string;
      overflowCounter: BigNumber;
    }
  >;

  pages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      BigNumber
    ] & {
      price: BigNumber;
      currentOffset: BigNumber;
      latestOrder: string;
      nextPage: string;
      prevPage: string;
      newestCancelPtr: string;
      oldestCancelPtr: string;
      overflowCounter: BigNumber;
    }
  >;

  callStatic: {
    getOrderKey(
      owner: string,
      pageKey: BytesLike,
      endOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        page: string;
        startOffset: BigNumber;
        endOffset: BigNumber;
        nextCancelPtr: string;
        overflowCounter: BigNumber;
      }
    >;

    pages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        BigNumber
      ] & {
        price: BigNumber;
        currentOffset: BigNumber;
        latestOrder: string;
        nextPage: string;
        prevPage: string;
        newestCancelPtr: string;
        oldestCancelPtr: string;
        overflowCounter: BigNumber;
      }
    >;
  };

  filters: {
    "Fill(bytes32,uint256)"(
      pageKey?: BytesLike | null,
      newOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; newOffset: BigNumber }
    >;

    Fill(
      pageKey?: BytesLike | null,
      newOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; newOffset: BigNumber }
    >;

    "LiquidityProvided(bytes32,uint256)"(
      pageKey?: BytesLike | null,
      endOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;

    LiquidityProvided(
      pageKey?: BytesLike | null,
      endOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;
  };

  estimateGas: {
    getOrderKey(
      owner: string,
      pageKey: BytesLike,
      endOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    pages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getOrderKey(
      owner: string,
      pageKey: BytesLike,
      endOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
