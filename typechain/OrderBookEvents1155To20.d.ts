/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderBookEvents1155To20Interface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Cancel(bytes32,uint256)": EventFragment;
    "Claim(bytes32,uint256)": EventFragment;
    "Fill(bytes32,uint256)": EventFragment;
    "LiquidityProvided(bytes32,uint256)": EventFragment;
    "PageCreated(bytes32,uint256,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PageCreated"): EventFragment;
}

export type CancelEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; endOffset: BigNumber }
>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; amount: BigNumber }
>;

export type FillEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; newOffset: BigNumber }
>;

export type LiquidityProvidedEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; endOffset: BigNumber }
>;

export type PageCreatedEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    pageKey: string;
    pagePrice: BigNumber;
    takerTokenHash: string;
    makerTokenHash: string;
  }
>;

export class OrderBookEvents1155To20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderBookEvents1155To20Interface;

  functions: {};

  callStatic: {};

  filters: {
    "Cancel(bytes32,uint256)"(
      pageKey?: null,
      endOffset?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;

    Cancel(
      pageKey?: null,
      endOffset?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;

    "Claim(bytes32,uint256)"(
      pageKey?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; amount: BigNumber }
    >;

    Claim(
      pageKey?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; amount: BigNumber }
    >;

    "Fill(bytes32,uint256)"(
      pageKey?: BytesLike | null,
      newOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; newOffset: BigNumber }
    >;

    Fill(
      pageKey?: BytesLike | null,
      newOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; newOffset: BigNumber }
    >;

    "LiquidityProvided(bytes32,uint256)"(
      pageKey?: BytesLike | null,
      endOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;

    LiquidityProvided(
      pageKey?: BytesLike | null,
      endOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;

    "PageCreated(bytes32,uint256,bytes32,bytes32)"(
      pageKey?: null,
      pagePrice?: BigNumberish | null,
      takerTokenHash?: BytesLike | null,
      makerTokenHash?: BytesLike | null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        pageKey: string;
        pagePrice: BigNumber;
        takerTokenHash: string;
        makerTokenHash: string;
      }
    >;

    PageCreated(
      pageKey?: null,
      pagePrice?: BigNumberish | null,
      takerTokenHash?: BytesLike | null,
      makerTokenHash?: BytesLike | null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        pageKey: string;
        pagePrice: BigNumber;
        takerTokenHash: string;
        makerTokenHash: string;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
