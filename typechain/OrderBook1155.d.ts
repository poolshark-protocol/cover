/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderBook1155Interface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "cancelOrder(bytes32,uint256,uint256)": FunctionFragment;
    "cancelOrders(bytes32[],uint256[],uint256[])": FunctionFragment;
    "claimOrders(uint256[],uint256[],address[],uint256[])": FunctionFragment;
    "fee()": FunctionFragment;
    "firstPageInBook0()": FunctionFragment;
    "firstPageInBook1()": FunctionFragment;
    "getOrderKey(address,bytes32,uint256)": FunctionFragment;
    "getPageKey(address,uint256,uint256)": FunctionFragment;
    "getPagePrice(address,uint256,uint256)": FunctionFragment;
    "id0()": FunctionFragment;
    "id1()": FunctionFragment;
    "limitOrder(address,uint256,uint256,bool,bool)": FunctionFragment;
    "quoteExactAmountIn(address,uint256,uint256)": FunctionFragment;
    "quoteExactAmountOut(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "quoteMarketPrice(address)": FunctionFragment;
    "takeLimitThenMake(address,uint256,uint256,uint256,bytes32,uint256,uint256)": FunctionFragment;
    "takeLimitThenReturn(uint256,uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "takeMarketThenReturn(uint256,uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "token0()": FunctionFragment;
    "token0Hash()": FunctionFragment;
    "token1()": FunctionFragment;
    "token1Hash()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [BytesLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOrders",
    values: [BigNumberish[], BigNumberish[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstPageInBook0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstPageInBook1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderKey",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPageKey",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPagePrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "id0", values?: undefined): string;
  encodeFunctionData(functionFragment: "id1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "limitOrder",
    values: [string, BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactAmountIn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteExactAmountOut",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteMarketPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "takeLimitThenMake",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takeLimitThenReturn",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takeMarketThenReturn",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token0Hash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token1Hash",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPageInBook0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPageInBook1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPageKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPagePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "limitOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteExactAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteMarketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeLimitThenMake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeLimitThenReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeMarketThenReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0Hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1Hash", data: BytesLike): Result;

  events: {
    "Cancel(bytes32,uint256)": EventFragment;
    "Claim(bytes32,uint256)": EventFragment;
    "Fill(bytes32,uint256)": EventFragment;
    "LiquidityProvided(bytes32,uint256)": EventFragment;
    "PageCreated(bytes32,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PageCreated"): EventFragment;
}

export type CancelEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; endOffset: BigNumber }
>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; amount: BigNumber }
>;

export type FillEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; newOffset: BigNumber }
>;

export type LiquidityProvidedEvent = TypedEvent<
  [string, BigNumber] & { pageKey: string; endOffset: BigNumber }
>;

export type PageCreatedEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    pageKey: string;
    pagePrice: BigNumber;
    takerToken: string;
    makerToken: string;
  }
>;

export class OrderBook1155 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderBook1155Interface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    cancelOrder(
      pagePtr: BytesLike,
      endOffset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrders(
      pagePtrs: BytesLike[],
      endOffsets: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOrders(
      pagePrices: BigNumberish[],
      endOffsets: BigNumberish[],
      claimTokens: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstPageInBook0(overrides?: CallOverrides): Promise<[string]>;

    firstPageInBook1(overrides?: CallOverrides): Promise<[string]>;

    getOrderKey(
      owner: string,
      pageKey: BytesLike,
      endOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPageKey(
      takerToken: string,
      takerAmount: BigNumberish,
      makerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPagePrice(
      takerToken: string,
      takerAmount: BigNumberish,
      makerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pagePrice: BigNumber }>;

    id0(overrides?: CallOverrides): Promise<[BigNumber]>;

    id1(overrides?: CallOverrides): Promise<[BigNumber]>;

    limitOrder(
      fromToken: string,
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      makerOnly: boolean,
      takerOnly: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quoteExactAmountIn(
      destToken: string,
      destAmount: BigNumberish,
      limitPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fromAmountIn: BigNumber;
        destAmountOut: BigNumber;
      }
    >;

    quoteExactAmountOut(
      fromToken: string,
      fromAmount: BigNumberish,
      limitPrice: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      maxCancelsTotal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        destAmountOut: BigNumber;
        fromAmountOut: BigNumber;
      }
    >;

    quoteMarketPrice(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    takeLimitThenMake(
      fromToken: string,
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      limitPrice: BigNumberish,
      startPagePtr: BytesLike,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeLimitThenReturn(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      limitPrice: BigNumberish,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeMarketThenReturn(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      limitPrice: BigNumberish,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token0Hash(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    token1Hash(overrides?: CallOverrides): Promise<[string]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  cancelOrder(
    pagePtr: BytesLike,
    endOffset: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrders(
    pagePtrs: BytesLike[],
    endOffsets: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOrders(
    pagePrices: BigNumberish[],
    endOffsets: BigNumberish[],
    claimTokens: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  firstPageInBook0(overrides?: CallOverrides): Promise<string>;

  firstPageInBook1(overrides?: CallOverrides): Promise<string>;

  getOrderKey(
    owner: string,
    pageKey: BytesLike,
    endOffset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPageKey(
    takerToken: string,
    takerAmount: BigNumberish,
    makerAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPagePrice(
    takerToken: string,
    takerAmount: BigNumberish,
    makerAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  id0(overrides?: CallOverrides): Promise<BigNumber>;

  id1(overrides?: CallOverrides): Promise<BigNumber>;

  limitOrder(
    fromToken: string,
    fromAmount: BigNumberish,
    destAmount: BigNumberish,
    makerOnly: boolean,
    takerOnly: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quoteExactAmountIn(
    destToken: string,
    destAmount: BigNumberish,
    limitPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      fromAmountIn: BigNumber;
      destAmountOut: BigNumber;
    }
  >;

  quoteExactAmountOut(
    fromToken: string,
    fromAmount: BigNumberish,
    limitPrice: BigNumberish,
    maxCancelsPerPage: BigNumberish,
    maxCancelsTotal: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      destAmountOut: BigNumber;
      fromAmountOut: BigNumber;
    }
  >;

  quoteMarketPrice(
    fromToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  takeLimitThenMake(
    fromToken: string,
    fromAmount: BigNumberish,
    destAmount: BigNumberish,
    limitPrice: BigNumberish,
    startPagePtr: BytesLike,
    maxCancels: BigNumberish,
    maxCancelsPerPage: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeLimitThenReturn(
    fromAmount: BigNumberish,
    destAmount: BigNumberish,
    fromToken: string,
    limitPrice: BigNumberish,
    maxCancels: BigNumberish,
    maxCancelsPerPage: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeMarketThenReturn(
    fromAmount: BigNumberish,
    destAmount: BigNumberish,
    fromToken: string,
    limitPrice: BigNumberish,
    maxCancels: BigNumberish,
    maxCancelsPerPage: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token0(overrides?: CallOverrides): Promise<string>;

  token0Hash(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  token1Hash(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    cancelOrder(
      pagePtr: BytesLike,
      endOffset: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrders(
      pagePtrs: BytesLike[],
      endOffsets: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimOrders(
      pagePrices: BigNumberish[],
      endOffsets: BigNumberish[],
      claimTokens: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    firstPageInBook0(overrides?: CallOverrides): Promise<string>;

    firstPageInBook1(overrides?: CallOverrides): Promise<string>;

    getOrderKey(
      owner: string,
      pageKey: BytesLike,
      endOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPageKey(
      takerToken: string,
      takerAmount: BigNumberish,
      makerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPagePrice(
      takerToken: string,
      takerAmount: BigNumberish,
      makerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id0(overrides?: CallOverrides): Promise<BigNumber>;

    id1(overrides?: CallOverrides): Promise<BigNumber>;

    limitOrder(
      fromToken: string,
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      makerOnly: boolean,
      takerOnly: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fromAmountOut: BigNumber;
        destAmountOut: BigNumber;
      }
    >;

    quoteExactAmountIn(
      destToken: string,
      destAmount: BigNumberish,
      limitPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fromAmountIn: BigNumber;
        destAmountOut: BigNumber;
      }
    >;

    quoteExactAmountOut(
      fromToken: string,
      fromAmount: BigNumberish,
      limitPrice: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      maxCancelsTotal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        destAmountOut: BigNumber;
        fromAmountOut: BigNumber;
      }
    >;

    quoteMarketPrice(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takeLimitThenMake(
      fromToken: string,
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      limitPrice: BigNumberish,
      startPagePtr: BytesLike,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    takeLimitThenReturn(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      limitPrice: BigNumberish,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    takeMarketThenReturn(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      limitPrice: BigNumberish,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    token0(overrides?: CallOverrides): Promise<string>;

    token0Hash(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    token1Hash(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Cancel(bytes32,uint256)"(
      pageKey?: null,
      endOffset?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;

    Cancel(
      pageKey?: null,
      endOffset?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;

    "Claim(bytes32,uint256)"(
      pageKey?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; amount: BigNumber }
    >;

    Claim(
      pageKey?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; amount: BigNumber }
    >;

    "Fill(bytes32,uint256)"(
      pageKey?: BytesLike | null,
      newOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; newOffset: BigNumber }
    >;

    Fill(
      pageKey?: BytesLike | null,
      newOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; newOffset: BigNumber }
    >;

    "LiquidityProvided(bytes32,uint256)"(
      pageKey?: BytesLike | null,
      endOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;

    LiquidityProvided(
      pageKey?: BytesLike | null,
      endOffset?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { pageKey: string; endOffset: BigNumber }
    >;

    "PageCreated(bytes32,uint256,address,address)"(
      pageKey?: null,
      pagePrice?: BigNumberish | null,
      takerToken?: string | null,
      makerToken?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        pageKey: string;
        pagePrice: BigNumber;
        takerToken: string;
        makerToken: string;
      }
    >;

    PageCreated(
      pageKey?: null,
      pagePrice?: BigNumberish | null,
      takerToken?: string | null,
      makerToken?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        pageKey: string;
        pagePrice: BigNumber;
        takerToken: string;
        makerToken: string;
      }
    >;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      pagePtr: BytesLike,
      endOffset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrders(
      pagePtrs: BytesLike[],
      endOffsets: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOrders(
      pagePrices: BigNumberish[],
      endOffsets: BigNumberish[],
      claimTokens: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    firstPageInBook0(overrides?: CallOverrides): Promise<BigNumber>;

    firstPageInBook1(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderKey(
      owner: string,
      pageKey: BytesLike,
      endOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPageKey(
      takerToken: string,
      takerAmount: BigNumberish,
      makerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPagePrice(
      takerToken: string,
      takerAmount: BigNumberish,
      makerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id0(overrides?: CallOverrides): Promise<BigNumber>;

    id1(overrides?: CallOverrides): Promise<BigNumber>;

    limitOrder(
      fromToken: string,
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      makerOnly: boolean,
      takerOnly: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quoteExactAmountIn(
      destToken: string,
      destAmount: BigNumberish,
      limitPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteExactAmountOut(
      fromToken: string,
      fromAmount: BigNumberish,
      limitPrice: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      maxCancelsTotal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteMarketPrice(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takeLimitThenMake(
      fromToken: string,
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      limitPrice: BigNumberish,
      startPagePtr: BytesLike,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeLimitThenReturn(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      limitPrice: BigNumberish,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeMarketThenReturn(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      limitPrice: BigNumberish,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token0Hash(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    token1Hash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOrder(
      pagePtr: BytesLike,
      endOffset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrders(
      pagePtrs: BytesLike[],
      endOffsets: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOrders(
      pagePrices: BigNumberish[],
      endOffsets: BigNumberish[],
      claimTokens: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPageInBook0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPageInBook1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrderKey(
      owner: string,
      pageKey: BytesLike,
      endOffset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPageKey(
      takerToken: string,
      takerAmount: BigNumberish,
      makerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPagePrice(
      takerToken: string,
      takerAmount: BigNumberish,
      makerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    id0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitOrder(
      fromToken: string,
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      makerOnly: boolean,
      takerOnly: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quoteExactAmountIn(
      destToken: string,
      destAmount: BigNumberish,
      limitPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteExactAmountOut(
      fromToken: string,
      fromAmount: BigNumberish,
      limitPrice: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      maxCancelsTotal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteMarketPrice(
      fromToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takeLimitThenMake(
      fromToken: string,
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      limitPrice: BigNumberish,
      startPagePtr: BytesLike,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeLimitThenReturn(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      limitPrice: BigNumberish,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeMarketThenReturn(
      fromAmount: BigNumberish,
      destAmount: BigNumberish,
      fromToken: string,
      limitPrice: BigNumberish,
      maxCancels: BigNumberish,
      maxCancelsPerPage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0Hash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1Hash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
