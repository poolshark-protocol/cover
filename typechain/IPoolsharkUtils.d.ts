/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPoolsharkUtilsInterface extends ethers.utils.Interface {
  functions: {
    "calculateAverageTick(address)": FunctionFragment;
    "divRoundingUp(uint256,uint256)": FunctionFragment;
    "getAmountsForLiquidity(uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "getDx(uint256,uint256,uint256,bool)": FunctionFragment;
    "getDy(uint256,uint256,uint256,bool)": FunctionFragment;
    "getLiquidityForAmounts(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "handleFees(uint256,uint24,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "initializePoolObservations(address)": FunctionFragment;
    "isPoolObservationsEnough(address)": FunctionFragment;
    "mulDiv(uint256,uint256,uint256)": FunctionFragment;
    "mulDivRoundingUp(uint256,uint256,uint256)": FunctionFragment;
    "sqrt(uint256)": FunctionFragment;
    "toBase((uint128,uint128),uint256)": FunctionFragment;
    "toElastic((uint128,uint128),uint256)": FunctionFragment;
    "toUint128(uint256)": FunctionFragment;
    "toUint160(uint256)": FunctionFragment;
    "within1(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateAverageTick",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "divRoundingUp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsForLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDx",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDy",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityForAmounts",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePoolObservations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolObservationsEnough",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mulDiv",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mulDivRoundingUp",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sqrt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "toBase",
    values: [{ elastic: BigNumberish; base: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toElastic",
    values: [{ elastic: BigNumberish; base: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint160",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "within1",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAverageTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "divRoundingUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityForAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializePoolObservations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolObservationsEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mulDiv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mulDivRoundingUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sqrt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toElastic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint160", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "within1", data: BytesLike): Result;

  events: {};
}

export class IPoolsharkUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolsharkUtilsInterface;

  functions: {
    calculateAverageTick(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[number] & { averageTick: number }>;

    divRoundingUp(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    getAmountsForLiquidity(
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      currentPrice: BigNumberish,
      liquidityAmount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        token0amount: BigNumber;
        token1amount: BigNumber;
      }
    >;

    getDx(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dx: BigNumber }>;

    getDy(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dy: BigNumber }>;

    getLiquidityForAmounts(
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      currentPrice: BigNumberish,
      dy: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    handleFees(
      output: BigNumberish,
      swapFee: BigNumberish,
      currentLiquidity: BigNumberish,
      totalFeeAmount: BigNumberish,
      amountOut: BigNumberish,
      protocolFee: BigNumberish,
      feeGrowthGlobal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalFeeAmount_: BigNumber;
        amountOut_: BigNumber;
        protocolFee_: BigNumber;
        feeGrowthGlobal_: BigNumber;
      }
    >;

    initializePoolObservations(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPoolObservationsEnough(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mulDiv(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    mulDivRoundingUp(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    sqrt(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    toBase(
      total: { elastic: BigNumberish; base: BigNumberish },
      elastic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { base: BigNumber }>;

    toElastic(
      total: { elastic: BigNumberish; base: BigNumberish },
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { elastic: BigNumber }>;

    toUint128(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    toUint160(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    within1(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  calculateAverageTick(
    pool: string,
    overrides?: CallOverrides
  ): Promise<number>;

  divRoundingUp(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsForLiquidity(
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    currentPrice: BigNumberish,
    liquidityAmount: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      token0amount: BigNumber;
      token1amount: BigNumber;
    }
  >;

  getDx(
    liquidity: BigNumberish,
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDy(
    liquidity: BigNumberish,
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidityForAmounts(
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    currentPrice: BigNumberish,
    dy: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  handleFees(
    output: BigNumberish,
    swapFee: BigNumberish,
    currentLiquidity: BigNumberish,
    totalFeeAmount: BigNumberish,
    amountOut: BigNumberish,
    protocolFee: BigNumberish,
    feeGrowthGlobal: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalFeeAmount_: BigNumber;
      amountOut_: BigNumber;
      protocolFee_: BigNumber;
      feeGrowthGlobal_: BigNumber;
    }
  >;

  initializePoolObservations(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPoolObservationsEnough(
    pool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mulDiv(
    a: BigNumberish,
    b: BigNumberish,
    denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mulDivRoundingUp(
    a: BigNumberish,
    b: BigNumberish,
    denominator: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toBase(
    total: { elastic: BigNumberish; base: BigNumberish },
    elastic: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toElastic(
    total: { elastic: BigNumberish; base: BigNumberish },
    base: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toUint128(y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toUint160(y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  within1(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    calculateAverageTick(
      pool: string,
      overrides?: CallOverrides
    ): Promise<number>;

    divRoundingUp(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForLiquidity(
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      currentPrice: BigNumberish,
      liquidityAmount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        token0amount: BigNumber;
        token1amount: BigNumber;
      }
    >;

    getDx(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDy(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityForAmounts(
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      currentPrice: BigNumberish,
      dy: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleFees(
      output: BigNumberish,
      swapFee: BigNumberish,
      currentLiquidity: BigNumberish,
      totalFeeAmount: BigNumberish,
      amountOut: BigNumberish,
      protocolFee: BigNumberish,
      feeGrowthGlobal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalFeeAmount_: BigNumber;
        amountOut_: BigNumber;
        protocolFee_: BigNumber;
        feeGrowthGlobal_: BigNumber;
      }
    >;

    initializePoolObservations(
      pool: string,
      overrides?: CallOverrides
    ): Promise<number>;

    isPoolObservationsEnough(
      pool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mulDiv(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDivRoundingUp(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toBase(
      total: { elastic: BigNumberish; base: BigNumberish },
      elastic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toElastic(
      total: { elastic: BigNumberish; base: BigNumberish },
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint128(y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint160(y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    within1(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    calculateAverageTick(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divRoundingUp(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForLiquidity(
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      currentPrice: BigNumberish,
      liquidityAmount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDx(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDy(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityForAmounts(
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      currentPrice: BigNumberish,
      dy: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleFees(
      output: BigNumberish,
      swapFee: BigNumberish,
      currentLiquidity: BigNumberish,
      totalFeeAmount: BigNumberish,
      amountOut: BigNumberish,
      protocolFee: BigNumberish,
      feeGrowthGlobal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializePoolObservations(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPoolObservationsEnough(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDiv(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulDivRoundingUp(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toBase(
      total: { elastic: BigNumberish; base: BigNumberish },
      elastic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toElastic(
      total: { elastic: BigNumberish; base: BigNumberish },
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint128(y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint160(y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    within1(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateAverageTick(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divRoundingUp(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsForLiquidity(
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      currentPrice: BigNumberish,
      liquidityAmount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDx(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDy(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityForAmounts(
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      currentPrice: BigNumberish,
      dy: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleFees(
      output: BigNumberish,
      swapFee: BigNumberish,
      currentLiquidity: BigNumberish,
      totalFeeAmount: BigNumberish,
      amountOut: BigNumberish,
      protocolFee: BigNumberish,
      feeGrowthGlobal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializePoolObservations(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPoolObservationsEnough(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulDiv(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulDivRoundingUp(
      a: BigNumberish,
      b: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sqrt(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBase(
      total: { elastic: BigNumberish; base: BigNumberish },
      elastic: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toElastic(
      total: { elastic: BigNumberish; base: BigNumberish },
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint128(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint160(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    within1(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
