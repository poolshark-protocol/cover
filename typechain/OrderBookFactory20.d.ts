/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderBookFactory20Interface extends ethers.utils.Interface {
  functions: {
    "allBooks(uint256)": FunctionFragment;
    "books(bytes32)": FunctionFragment;
    "createBook(address,address,uint256,uint256)": FunctionFragment;
    "feeTierPageSpacing(uint256)": FunctionFragment;
    "getBook(address,address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allBooks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "books", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "createBook",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeTierPageSpacing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBook",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allBooks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "books", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeTierPageSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {
    "BookCreated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BookCreated"): EventFragment;
}

export type BookCreatedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    book: string;
    token0: string;
    token1: string;
    fee: BigNumber;
  }
>;

export class OrderBookFactory20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderBookFactory20Interface;

  functions: {
    allBooks(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    books(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    createBook(
      fromToken: string,
      destToken: string,
      fee: BigNumberish,
      makerTier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeTierPageSpacing(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBook(
      fromToken: string,
      destToken: string,
      fee: BigNumberish,
      makerTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;
  };

  allBooks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  books(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  createBook(
    fromToken: string,
    destToken: string,
    fee: BigNumberish,
    makerTier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeTierPageSpacing(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBook(
    fromToken: string,
    destToken: string,
    fee: BigNumberish,
    makerTier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allBooks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    books(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    createBook(
      fromToken: string,
      destToken: string,
      fee: BigNumberish,
      makerTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    feeTierPageSpacing(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBook(
      fromToken: string,
      destToken: string,
      fee: BigNumberish,
      makerTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BookCreated(address,address,address,uint256)"(
      book?: null,
      token0?: null,
      token1?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { book: string; token0: string; token1: string; fee: BigNumber }
    >;

    BookCreated(
      book?: null,
      token0?: null,
      token1?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { book: string; token0: string; token1: string; fee: BigNumber }
    >;
  };

  estimateGas: {
    allBooks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    books(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    createBook(
      fromToken: string,
      destToken: string,
      fee: BigNumberish,
      makerTier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeTierPageSpacing(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBook(
      fromToken: string,
      destToken: string,
      fee: BigNumberish,
      makerTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allBooks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    books(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBook(
      fromToken: string,
      destToken: string,
      fee: BigNumberish,
      makerTier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeTierPageSpacing(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBook(
      fromToken: string,
      destToken: string,
      fee: BigNumberish,
      makerTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
