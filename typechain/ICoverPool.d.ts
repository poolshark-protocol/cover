/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICoverPoolInterface extends ethers.utils.Interface {
  functions: {
    "burn((address,int24,int24,int24,bool,uint128,bool))": FunctionFragment;
    "collect(int24,int24,int24,bool)": FunctionFragment;
    "mint((address,int24,int24,int24,int24,int24,uint128,bool))": FunctionFragment;
    "swap(address,bool,uint128,uint160)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burn",
    values: [
      {
        to: string;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
        amount: BigNumberish;
        collect: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        to: string;
        lowerOld: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        upperOld: BigNumberish;
        amount: BigNumberish;
        zeroForOne: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, boolean, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export class ICoverPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICoverPoolInterface;

  functions: {
    burn(
      burnParams: {
        to: string;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
        amount: BigNumberish;
        collect: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      claim: BigNumberish,
      zeroForOne: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      mintParams: {
        to: string;
        lowerOld: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        upperOld: BigNumberish;
        amount: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      recipient: string,
      zeroForOne: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burn(
    burnParams: {
      to: string;
      lower: BigNumberish;
      claim: BigNumberish;
      upper: BigNumberish;
      zeroForOne: boolean;
      amount: BigNumberish;
      collect: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    lower: BigNumberish,
    upper: BigNumberish,
    claim: BigNumberish,
    zeroForOne: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    mintParams: {
      to: string;
      lowerOld: BigNumberish;
      lower: BigNumberish;
      claim: BigNumberish;
      upper: BigNumberish;
      upperOld: BigNumberish;
      amount: BigNumberish;
      zeroForOne: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    recipient: string,
    zeroForOne: boolean,
    amountIn: BigNumberish,
    priceLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      burnParams: {
        to: string;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
        amount: BigNumberish;
        collect: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      claim: BigNumberish,
      zeroForOne: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      mintParams: {
        to: string;
        lowerOld: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        upperOld: BigNumberish;
        amount: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      recipient: string,
      zeroForOne: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    burn(
      burnParams: {
        to: string;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
        amount: BigNumberish;
        collect: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      claim: BigNumberish,
      zeroForOne: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      mintParams: {
        to: string;
        lowerOld: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        upperOld: BigNumberish;
        amount: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      recipient: string,
      zeroForOne: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      burnParams: {
        to: string;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
        amount: BigNumberish;
        collect: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      lower: BigNumberish,
      upper: BigNumberish,
      claim: BigNumberish,
      zeroForOne: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      mintParams: {
        to: string;
        lowerOld: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        upperOld: BigNumberish;
        amount: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      recipient: string,
      zeroForOne: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
